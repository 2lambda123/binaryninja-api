import ctypes
from typing import Optional, Callable

# Type definitions
ActionTypeEnum = ctypes.c_int
class BNActiveAnalysisInfo(ctypes.Structure): ...
class BNActivity(ctypes.Structure): ...
class BNAddressRange(ctypes.Structure): ...
class BNAnalysisCompletionEvent(ctypes.Structure): ...
class BNAnalysisContext(ctypes.Structure): ...
class BNAnalysisInfo(ctypes.Structure): ...
AnalysisModeEnum = ctypes.c_int
class BNAnalysisParameters(ctypes.Structure): ...
class BNAnalysisProgress(ctypes.Structure): ...
AnalysisSkipReasonEnum = ctypes.c_int
AnalysisStateEnum = ctypes.c_int
AnalysisWarningActionTypeEnum = ctypes.c_int
class BNArchitecture(ctypes.Structure): ...
class BNArchitectureAndAddress(ctypes.Structure): ...
class BNBackgroundTask(ctypes.Structure): ...
class BNBasicBlock(ctypes.Structure): ...
class BNBasicBlockEdge(ctypes.Structure): ...
class BNBinaryDataNotification(ctypes.Structure): ...
class BNBinaryReader(ctypes.Structure): ...
class BNBinaryView(ctypes.Structure): ...
class BNBinaryViewEvent(ctypes.Structure): ...
BinaryViewEventTypeEnum = ctypes.c_int
class BNBinaryViewType(ctypes.Structure): ...
class BNBinaryWriter(ctypes.Structure): ...
class BNBoolWithConfidence(ctypes.Structure): ...
BranchTypeEnum = ctypes.c_int
class BNCallingConvention(ctypes.Structure): ...
CallingConventionNameEnum = ctypes.c_int
class BNCallingConventionWithConfidence(ctypes.Structure): ...
class BNConstantReference(ctypes.Structure): ...
class BNCustomArchitecture(ctypes.Structure): ...
class BNCustomBinaryView(ctypes.Structure): ...
class BNCustomBinaryViewType(ctypes.Structure): ...
class BNCustomCallingConvention(ctypes.Structure): ...
class BNCustomDataRenderer(ctypes.Structure): ...
class BNCustomFlowGraph(ctypes.Structure): ...
class BNCustomRelocationHandler(ctypes.Structure): ...
class BNCustomTransform(ctypes.Structure): ...
class BNDataBuffer(ctypes.Structure): ...
DataFlowQueryOptionEnum = ctypes.c_int
class BNDataRenderer(ctypes.Structure): ...
class BNDataRendererContainer(ctypes.Structure): ...
class BNDataVariable(ctypes.Structure): ...
class BNDataVariableAndName(ctypes.Structure): ...
class BNDatabase(ctypes.Structure): ...
DeadStoreEliminationEnum = ctypes.c_int
class BNDebugFunctionInfo(ctypes.Structure): ...
class BNDebugInfo(ctypes.Structure): ...
class BNDebugInfoParser(ctypes.Structure): ...
DisassemblyOptionEnum = ctypes.c_int
class BNDisassemblySettings(ctypes.Structure): ...
class BNDisassemblyTextLine(ctypes.Structure): ...
class BNDisassemblyTextLineTypeInfo(ctypes.Structure): ...
class BNDisassemblyTextRenderer(ctypes.Structure): ...
class BNDownloadInstance(ctypes.Structure): ...
class BNDownloadInstanceCallbacks(ctypes.Structure): ...
class BNDownloadInstanceInputOutputCallbacks(ctypes.Structure): ...
class BNDownloadInstanceOutputCallbacks(ctypes.Structure): ...
class BNDownloadInstanceResponse(ctypes.Structure): ...
class BNDownloadProvider(ctypes.Structure): ...
class BNDownloadProviderCallbacks(ctypes.Structure): ...
EdgePenStyleEnum = ctypes.c_int
class BNEdgeStyle(ctypes.Structure): ...
EndiannessEnum = ctypes.c_int
class BNEnumeration(ctypes.Structure): ...
class BNEnumerationBuilder(ctypes.Structure): ...
class BNEnumerationMember(ctypes.Structure): ...
class BNFileAccessor(ctypes.Structure): ...
class BNFileMetadata(ctypes.Structure): ...
FindFlagEnum = ctypes.c_int
FindRangeTypeEnum = ctypes.c_int
FindTypeEnum = ctypes.c_int
class BNFlagConditionForSemanticClass(ctypes.Structure): ...
FlagRoleEnum = ctypes.c_int
class BNFlowGraph(ctypes.Structure): ...
class BNFlowGraphEdge(ctypes.Structure): ...
class BNFlowGraphLayoutRequest(ctypes.Structure): ...
class BNFlowGraphNode(ctypes.Structure): ...
FlowGraphOptionEnum = ctypes.c_int
class BNFormInputField(ctypes.Structure): ...
FormInputFieldTypeEnum = ctypes.c_int
class BNFunction(ctypes.Structure): ...
FunctionAnalysisSkipOverrideEnum = ctypes.c_int
FunctionGraphTypeEnum = ctypes.c_int
class BNFunctionParameter(ctypes.Structure): ...
class BNFunctionRecognizer(ctypes.Structure): ...
FunctionUpdateTypeEnum = ctypes.c_int
class BNHighLevelILFunction(ctypes.Structure): ...
class BNHighLevelILInstruction(ctypes.Structure): ...
HighLevelILOperationEnum = ctypes.c_int
class BNHighlightColor(ctypes.Structure): ...
HighlightColorStyleEnum = ctypes.c_int
HighlightStandardColorEnum = ctypes.c_int
ILBranchDependenceEnum = ctypes.c_int
class BNILBranchInstructionAndDependence(ctypes.Structure): ...
class BNILReferenceSource(ctypes.Structure): ...
ImplicitRegisterExtendEnum = ctypes.c_int
class BNIndirectBranchInfo(ctypes.Structure): ...
class BNInstructionInfo(ctypes.Structure): ...
class BNInstructionTextLine(ctypes.Structure): ...
class BNInstructionTextToken(ctypes.Structure): ...
InstructionTextTokenContextEnum = ctypes.c_int
InstructionTextTokenTypeEnum = ctypes.c_int
IntegerDisplayTypeEnum = ctypes.c_int
class BNInteractionHandlerCallbacks(ctypes.Structure): ...
class BNKeyValueStore(ctypes.Structure): ...
class BNLanguageRepresentationFunction(ctypes.Structure): ...
class BNLinearDisassemblyLine(ctypes.Structure): ...
LinearDisassemblyLineTypeEnum = ctypes.c_int
class BNLinearViewCursor(ctypes.Structure): ...
class BNLinearViewObject(ctypes.Structure): ...
class BNLinearViewObjectIdentifier(ctypes.Structure): ...
LinearViewObjectIdentifierTypeEnum = ctypes.c_int
LogLevelEnum = ctypes.c_int
class BNLogListener(ctypes.Structure): ...
class BNLogger(ctypes.Structure): ...
class BNLookupTableEntry(ctypes.Structure): ...
LowLevelILFlagConditionEnum = ctypes.c_int
class BNLowLevelILFunction(ctypes.Structure): ...
class BNLowLevelILInstruction(ctypes.Structure): ...
class BNLowLevelILLabel(ctypes.Structure): ...
LowLevelILOperationEnum = ctypes.c_int
class BNMainThreadAction(ctypes.Structure): ...
class BNMainThreadCallbacks(ctypes.Structure): ...
class BNMediumLevelILFunction(ctypes.Structure): ...
class BNMediumLevelILInstruction(ctypes.Structure): ...
class BNMediumLevelILLabel(ctypes.Structure): ...
MediumLevelILOperationEnum = ctypes.c_int
MemberAccessEnum = ctypes.c_int
MemberScopeEnum = ctypes.c_int
class BNMemoryUsageInfo(ctypes.Structure): ...
class BNMergeResult(ctypes.Structure): ...
MergeStatusEnum = ctypes.c_int
MessageBoxButtonResultEnum = ctypes.c_int
MessageBoxButtonSetEnum = ctypes.c_int
MessageBoxIconEnum = ctypes.c_int
class BNMetadata(ctypes.Structure): ...
MetadataTypeEnum = ctypes.c_int
class BNMetadataValueStore(ctypes.Structure): ...
ModificationStatusEnum = ctypes.c_int
class BNNameAndType(ctypes.Structure): ...
class BNNameList(ctypes.Structure): ...
class BNNameSpace(ctypes.Structure): ...
NameTypeEnum = ctypes.c_int
class BNNamedTypeReference(ctypes.Structure): ...
class BNNamedTypeReferenceBuilder(ctypes.Structure): ...
NamedTypeReferenceClassEnum = ctypes.c_int
class BNNavigationHandler(ctypes.Structure): ...
class BNObjectDestructionCallbacks(ctypes.Structure): ...
class BNOffsetWithConfidence(ctypes.Structure): ...
class BNParameterVariablesWithConfidence(ctypes.Structure): ...
class BNParsedType(ctypes.Structure): ...
class BNPerformanceInfo(ctypes.Structure): ...
class BNPlatform(ctypes.Structure): ...
class BNPluginCommand(ctypes.Structure): ...
PluginCommandTypeEnum = ctypes.c_int
PluginLoadOrderEnum = ctypes.c_int
PluginOriginEnum = ctypes.c_int
PluginStatusEnum = ctypes.c_int
PluginTypeEnum = ctypes.c_int
class BNPoint(ctypes.Structure): ...
PointerSuffixEnum = ctypes.c_int
class BNPossibleValueSet(ctypes.Structure): ...
class BNQualifiedName(ctypes.Structure): ...
class BNQualifiedNameAndType(ctypes.Structure): ...
class BNQualifiedNameList(ctypes.Structure): ...
class BNQualifiedNameTypeAndId(ctypes.Structure): ...
class BNRange(ctypes.Structure): ...
class BNReferenceSource(ctypes.Structure): ...
ReferenceTypeEnum = ctypes.c_int
class BNRegisterInfo(ctypes.Structure): ...
class BNRegisterOrConstant(ctypes.Structure): ...
class BNRegisterSetWithConfidence(ctypes.Structure): ...
class BNRegisterStackAdjustment(ctypes.Structure): ...
class BNRegisterStackInfo(ctypes.Structure): ...
class BNRegisterValue(ctypes.Structure): ...
RegisterValueTypeEnum = ctypes.c_int
class BNRegisterValueWithConfidence(ctypes.Structure): ...
class BNRelocation(ctypes.Structure): ...
class BNRelocationHandler(ctypes.Structure): ...
class BNRelocationInfo(ctypes.Structure): ...
RelocationTypeEnum = ctypes.c_int
class BNRepoPlugin(ctypes.Structure): ...
class BNReportCollection(ctypes.Structure): ...
ReportTypeEnum = ctypes.c_int
class BNRepository(ctypes.Structure): ...
class BNRepositoryManager(ctypes.Structure): ...
SaveOptionEnum = ctypes.c_int
class BNSaveSettings(ctypes.Structure): ...
class BNScriptingInstance(ctypes.Structure): ...
class BNScriptingInstanceCallbacks(ctypes.Structure): ...
class BNScriptingOutputListener(ctypes.Structure): ...
class BNScriptingProvider(ctypes.Structure): ...
class BNScriptingProviderCallbacks(ctypes.Structure): ...
ScriptingProviderExecuteResultEnum = ctypes.c_int
ScriptingProviderInputReadyStateEnum = ctypes.c_int
class BNSecretsProvider(ctypes.Structure): ...
class BNSecretsProviderCallbacks(ctypes.Structure): ...
class BNSection(ctypes.Structure): ...
SectionSemanticsEnum = ctypes.c_int
class BNSegment(ctypes.Structure): ...
SegmentFlagEnum = ctypes.c_int
class BNSettings(ctypes.Structure): ...
SettingsScopeEnum = ctypes.c_int
class BNSnapshot(ctypes.Structure): ...
class BNStackVariableReference(ctypes.Structure): ...
class BNStringReference(ctypes.Structure): ...
StringTypeEnum = ctypes.c_int
class BNStructure(ctypes.Structure): ...
class BNStructureBuilder(ctypes.Structure): ...
class BNStructureMember(ctypes.Structure): ...
StructureVariantEnum = ctypes.c_int
class BNSymbol(ctypes.Structure): ...
SymbolBindingEnum = ctypes.c_int
SymbolTypeEnum = ctypes.c_int
class BNSystemCallInfo(ctypes.Structure): ...
class BNTag(ctypes.Structure): ...
class BNTagReference(ctypes.Structure): ...
TagReferenceTypeEnum = ctypes.c_int
class BNTagType(ctypes.Structure): ...
TagTypeTypeEnum = ctypes.c_int
class BNTemporaryFile(ctypes.Structure): ...
ThemeColorEnum = ctypes.c_int
TokenEscapingTypeEnum = ctypes.c_int
class BNTransform(ctypes.Structure): ...
class BNTransformParameter(ctypes.Structure): ...
class BNTransformParameterInfo(ctypes.Structure): ...
TransformTypeEnum = ctypes.c_int
class BNType(ctypes.Structure): ...
class BNTypeBuilder(ctypes.Structure): ...
TypeClassEnum = ctypes.c_int
class BNTypeContext(ctypes.Structure): ...
class BNTypeDefinitionLine(ctypes.Structure): ...
TypeDefinitionLineTypeEnum = ctypes.c_int
class BNTypeField(ctypes.Structure): ...
class BNTypeFieldReference(ctypes.Structure): ...
class BNTypeFieldReferenceSizeInfo(ctypes.Structure): ...
class BNTypeFieldReferenceTypeInfo(ctypes.Structure): ...
class BNTypeLibrary(ctypes.Structure): ...
class BNTypeLibraryMapping(ctypes.Structure): ...
class BNTypeParser(ctypes.Structure): ...
class BNTypeParserCallbacks(ctypes.Structure): ...
class BNTypeParserError(ctypes.Structure): ...
TypeParserErrorSeverityEnum = ctypes.c_int
class BNTypeParserResult(ctypes.Structure): ...
class BNTypePrinter(ctypes.Structure): ...
class BNTypePrinterCallbacks(ctypes.Structure): ...
class BNTypeReferenceSource(ctypes.Structure): ...
TypeReferenceTypeEnum = ctypes.c_int
class BNTypeWithConfidence(ctypes.Structure): ...
class BNUndoAction(ctypes.Structure): ...
class BNUndoEntry(ctypes.Structure): ...
class BNUpdateChannel(ctypes.Structure): ...
UpdateResultEnum = ctypes.c_int
class BNUpdateVersion(ctypes.Structure): ...
class BNUser(ctypes.Structure): ...
class BNUserVariableValue(ctypes.Structure): ...
class BNValueRange(ctypes.Structure): ...
class BNVariable(ctypes.Structure): ...
class BNVariableNameAndType(ctypes.Structure): ...
class BNVariableReferenceSource(ctypes.Structure): ...
VariableSourceTypeEnum = ctypes.c_int
class BNWebsocketClient(ctypes.Structure): ...
class BNWebsocketClientCallbacks(ctypes.Structure): ...
class BNWebsocketClientOutputCallbacks(ctypes.Structure): ...
class BNWebsocketProvider(ctypes.Structure): ...
class BNWebsocketProviderCallbacks(ctypes.Structure): ...
class BNWorkflow(ctypes.Structure): ...
WorkflowStateEnum = ctypes.c_int
PluginLoadStatusEnum = ctypes.c_int

# Structure definitions

# Function definitions
def _BNAbortAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNAbortFlowGraphLayoutRequest(arg0: 'ctypes.pointer[BNFlowGraphLayoutRequest]', ) -> 'None': ...
def _BNAcquireEnterpriseServerLicense(arg0: 'int', ) -> 'ctypes.c_bool': ...
def _BNActivityGetName(arg0: 'ctypes.pointer[BNActivity]', ) -> 'ctypes.c_char_p': ...
def _BNAddAnalysisCompletionEvent(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'ctypes.pointer[BNAnalysisCompletionEvent]': ...
def _BNAddAnalysisOption(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'None': ...
def _BNAddArchitectureRedirection(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNArchitecture]', ) -> 'None': ...
def _BNAddAutoAddressTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddAutoDataTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddAutoFunctionTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddAutoSection(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'int', arg3: 'int', arg4: 'SectionSemanticsEnum', arg5: 'str', arg6: 'int', arg7: 'int', arg8: 'str', arg9: 'str', arg10: 'int', ) -> 'None': ...
def _BNAddAutoSegment(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNAddBinaryViewTypeLibrary(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTypeLibrary]', ) -> 'None': ...
def _BNAddDebugDataVariable(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'int', arg2: 'ctypes.pointer[BNType]', arg3: 'str', ) -> 'ctypes.c_bool': ...
def _BNAddDebugFunction(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'ctypes.pointer[BNDebugFunctionInfo]', ) -> 'ctypes.c_bool': ...
def _BNAddDebugType(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'str', arg2: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_bool': ...
def _BNAddEntryPointForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', ) -> 'None': ...
def _BNAddEnumerationBuilderMember(arg0: 'ctypes.pointer[BNEnumerationBuilder]', arg1: 'str', ) -> 'None': ...
def _BNAddEnumerationBuilderMemberWithValue(arg0: 'ctypes.pointer[BNEnumerationBuilder]', arg1: 'str', arg2: 'int', ) -> 'None': ...
def _BNAddFlowGraphNode(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_uint64': ...
def _BNAddFlowGraphNodeOutgoingEdge(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'BranchTypeEnum', arg2: 'ctypes.pointer[BNFlowGraphNode]', arg3: 'BNEdgeStyle', ) -> 'None': ...
def _BNAddFunctionForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', ) -> 'None': ...
def _BNAddGraphReportToCollection(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'str', arg3: 'ctypes.pointer[BNFlowGraph]', ) -> 'None': ...
def _BNAddHTMLReportToCollection(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'str', arg3: 'str', arg4: 'str', ) -> 'None': ...
def _BNAddLowLevelILLabelForAddress(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'None': ...
def _BNAddMarkdownReportToCollection(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'str', arg3: 'str', arg4: 'str', ) -> 'None': ...
def _BNAddOptionalPluginDependency(arg0: 'str', ) -> 'None': ...
def _BNAddPlainTextReportToCollection(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'str', arg3: 'str', ) -> 'None': ...
def _BNAddRelatedPlatform(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNAddRequiredPluginDependency(arg0: 'str', ) -> 'None': ...
def _BNAddStructureBuilderMember(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'str', arg3: 'MemberAccessEnum', arg4: 'MemberScopeEnum', ) -> 'None': ...
def _BNAddStructureBuilderMemberAtOffset(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'str', arg3: 'int', arg4: 'bool', arg5: 'MemberAccessEnum', arg6: 'MemberScopeEnum', ) -> 'None': ...
def _BNAddTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTag]', arg2: 'bool', ) -> 'None': ...
def _BNAddTagType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNAddTypeLibraryAlternateName(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNAddTypeLibraryNamedObject(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNAddTypeLibraryNamedType(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNAddTypeLibraryNamedTypeSource(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'str', ) -> 'None': ...
def _BNAddTypeLibraryPlatform(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNAddTypeMemberTokens(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'int', arg5: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg6: 'ctypes.pointer[ctypes.c_uint64]', arg7: 'int', arg8: 'bool', ) -> 'ctypes.c_bool': ...
def _BNAddUserAddressTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddUserCodeReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'None': ...
def _BNAddUserDataReference(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNAddUserDataTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddUserFunctionTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNAddUserSection(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'int', arg3: 'int', arg4: 'SectionSemanticsEnum', arg5: 'str', arg6: 'int', arg7: 'int', arg8: 'str', arg9: 'str', arg10: 'int', ) -> 'None': ...
def _BNAddUserSegment(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNAddUserTypeFieldReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNQualifiedName]', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNAddUserTypeReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNAllocString(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNAllocStringList(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNAlwaysBranch(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNAnalysisContextGetFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNAnalysisContextGetHighLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNAnalysisContextGetLowLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNAnalysisContextGetMediumLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNAnalysisContextInform(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNAppendDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'ctypes.pointer[BNDataBuffer]', ) -> 'None': ...
def _BNAppendDataBufferContents(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', ) -> 'None': ...
def _BNAppendPath(arg0: 'str', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNApplyAutoDiscoveredFunctionType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNApplyDebugInfo(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDebugInfo]', ) -> 'None': ...
def _BNApplyImportedTypes(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNSymbol]', arg2: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNApplySnapshotData(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[BNKeyValueStore]', arg3: 'ctypes.pointer[BNKeyValueStore]', arg4: 'Optional[ctypes.c_void_p]', arg5: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg6: 'bool', arg7: 'bool', ) -> 'None': ...
def _BNArchitectureAlwaysBranch(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNArchitectureConvertToNop(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNArchitectureGetRelocationHandler(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNRelocationHandler]': ...
def _BNArchitectureInvertBranch(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNArchitectureRegisterRelocationHandler(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[BNRelocationHandler]', ) -> 'None': ...
def _BNArchitectureSkipAndReturnValue(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNAreArgumentRegistersSharedIndex(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_bool': ...
def _BNAreArgumentRegistersUsedForVarArgs(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_bool': ...
def _BNAreAutoUpdatesEnabled() -> 'ctypes.c_bool': ...
def _BNAreUpdatesAvailable(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNAssemble(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'int', arg3: 'ctypes.pointer[BNDataBuffer]', arg4: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNAssignDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'ctypes.pointer[BNDataBuffer]', ) -> 'None': ...
def _BNAuthenticateEnterpriseServerWithCredentials(arg0: 'str', arg1: 'str', arg2: 'bool', ) -> 'ctypes.c_bool': ...
def _BNAuthenticateEnterpriseServerWithMethod(arg0: 'str', arg1: 'bool', ) -> 'ctypes.c_bool': ...
def _BNBasicBlockCanExit(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNBasicBlockHasInvalidInstructions(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNBasicBlockHasUndeterminedOutgoingEdges(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNBasicBlockSetCanExit(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'bool', ) -> 'None': ...
def _BNBeginBackgroundTask(arg0: 'str', arg1: 'bool', ) -> 'ctypes.pointer[BNBackgroundTask]': ...
def _BNBeginBulkModifySymbols(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNBeginKeyValueStoreNamespace(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', ) -> 'None': ...
def _BNBeginUndoActions(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNBinaryViewExportObjectToTypeLibrary(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTypeLibrary]', arg2: 'ctypes.pointer[BNQualifiedName]', arg3: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNBinaryViewExportTypeToTypeLibrary(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTypeLibrary]', arg2: 'ctypes.pointer[BNQualifiedName]', arg3: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNBinaryViewGetLoadSettings(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNSettings]': ...
def _BNBinaryViewGetLoadSettingsTypeNames(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNBinaryViewImportTypeLibraryObject(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTypeLibrary]', arg2: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNBinaryViewImportTypeLibraryType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTypeLibrary]', arg2: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNBinaryViewQueryMetadata(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNBinaryViewRemoveMetadata(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'None': ...
def _BNBinaryViewSetLoadSettings(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNSettings]', ) -> 'None': ...
def _BNBinaryViewStoreMetadata(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNMetadata]', arg3: 'bool', ) -> 'None': ...
def _BNCanArchitectureAssemble(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_bool': ...
def _BNCanAssemble(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_bool': ...
def _BNCanCancelBackgroundTask(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'ctypes.c_bool': ...
def _BNCanFunctionReturn(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNBoolWithConfidence': ...
def _BNCancelAnalysisCompletionEvent(arg0: 'ctypes.pointer[BNAnalysisCompletionEvent]', ) -> 'None': ...
def _BNCancelBackgroundTask(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'None': ...
def _BNCancelEnterpriseServerAuthentication() -> 'None': ...
def _BNCancelScriptInput(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'None': ...
def _BNClearDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'None': ...
def _BNClearTypeLibraryPlatforms(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'None': ...
def _BNClearUndoEntries(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNClearUserVariableValue(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNArchitectureAndAddress]', ) -> 'None': ...
def _BNCloseFile(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNCloseLogs() -> 'None': ...
def _BNCloseProject(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNCommitUndoActions(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNCompareLinearViewCursors(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_int32': ...
def _BNCompareLinearViewObjectChildren(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObject]', arg2: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.c_int32': ...
def _BNConnectEnterpriseServer() -> 'ctypes.c_bool': ...
def _BNConnectWebsocketClient(arg0: 'ctypes.pointer[BNWebsocketClient]', arg1: 'str', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'ctypes.pointer[BNWebsocketClientOutputCallbacks]', ) -> 'ctypes.c_bool': ...
def _BNConvertToNop(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNCopyFile(arg0: 'str', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNCreateActivity(arg0: 'str', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNAnalysisContext], ], None]', ) -> 'ctypes.pointer[BNActivity]': ...
def _BNCreateAnalysisContext() -> 'ctypes.pointer[BNAnalysisContext]': ...
def _BNCreateArrayType(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'int', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateArrayTypeBuilder(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'int', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateAutoStackVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNTypeWithConfidence]', arg3: 'str', ) -> 'None': ...
def _BNCreateAutoVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNTypeWithConfidence]', arg3: 'str', arg4: 'bool', ) -> 'None': ...
def _BNCreateBinaryDataView(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryDataViewFromBuffer(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryDataViewFromData(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryDataViewFromFile(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[BNFileAccessor]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryDataViewFromFilename(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryReader(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryReader]': ...
def _BNCreateBinaryViewOfType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateBinaryWriter(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryWriter]': ...
def _BNCreateBoolType() -> 'ctypes.pointer[BNType]': ...
def _BNCreateBoolTypeBuilder() -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[BNCustomCallingConvention]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNCreateCustomBinaryView(arg0: 'str', arg1: 'ctypes.pointer[BNFileMetadata]', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[BNCustomBinaryView]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNCreateCustomFlowGraph(arg0: 'ctypes.pointer[BNCustomFlowGraph]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateDataBuffer(arg0: 'Optional[ctypes.c_void_p]', arg1: 'int', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNCreateDataRenderer(arg0: 'ctypes.pointer[BNCustomDataRenderer]', ) -> 'ctypes.pointer[BNDataRenderer]': ...
def _BNCreateDatabase(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNSaveSettings]', ) -> 'ctypes.c_bool': ...
def _BNCreateDatabaseWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'Optional[ctypes.c_void_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg4: 'ctypes.pointer[BNSaveSettings]', ) -> 'ctypes.c_bool': ...
def _BNCreateDirectory(arg0: 'str', arg1: 'bool', ) -> 'ctypes.c_bool': ...
def _BNCreateDisassemblySettings() -> 'ctypes.pointer[BNDisassemblySettings]': ...
def _BNCreateDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblyTextRenderer]': ...
def _BNCreateDownloadProviderInstance(arg0: 'ctypes.pointer[BNDownloadProvider]', ) -> 'ctypes.pointer[BNDownloadInstance]': ...
def _BNCreateEnumerationBuilder() -> 'ctypes.pointer[BNEnumerationBuilder]': ...
def _BNCreateEnumerationBuilderFromEnumeration(arg0: 'ctypes.pointer[BNEnumeration]', ) -> 'ctypes.pointer[BNEnumerationBuilder]': ...
def _BNCreateEnumerationType(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNEnumeration]', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateEnumerationTypeBuilder(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNEnumeration]', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateEnumerationTypeBuilderWithBuilder(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNEnumerationBuilder]', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateEnumerationTypeOfWidth(arg0: 'ctypes.pointer[BNEnumeration]', arg1: 'int', arg2: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateFileMetadata() -> 'ctypes.pointer[BNFileMetadata]': ...
def _BNCreateFloatType(arg0: 'int', arg1: 'str', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateFloatTypeBuilder(arg0: 'int', arg1: 'str', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateFlowGraph() -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateFlowGraphNode(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNFlowGraphNode]': ...
def _BNCreateFunctionGraph(arg0: 'ctypes.pointer[BNFunction]', arg1: 'FunctionGraphTypeEnum', arg2: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateFunctionType(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'ctypes.pointer[BNCallingConventionWithConfidence]', arg2: 'ctypes.pointer[BNFunctionParameter]', arg3: 'int', arg4: 'ctypes.pointer[BNBoolWithConfidence]', arg5: 'ctypes.pointer[BNBoolWithConfidence]', arg6: 'ctypes.pointer[BNOffsetWithConfidence]', arg7: 'ctypes.pointer[ctypes.c_uint32]', arg8: 'ctypes.pointer[BNOffsetWithConfidence]', arg9: 'int', arg10: 'ctypes.pointer[BNRegisterSetWithConfidence]', arg11: 'NameTypeEnum', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateFunctionTypeBuilder(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'ctypes.pointer[BNCallingConventionWithConfidence]', arg2: 'ctypes.pointer[BNFunctionParameter]', arg3: 'int', arg4: 'ctypes.pointer[BNBoolWithConfidence]', arg5: 'ctypes.pointer[BNBoolWithConfidence]', arg6: 'ctypes.pointer[BNOffsetWithConfidence]', arg7: 'ctypes.pointer[ctypes.c_uint32]', arg8: 'ctypes.pointer[BNOffsetWithConfidence]', arg9: 'int', arg10: 'ctypes.pointer[BNRegisterSetWithConfidence]', arg11: 'NameTypeEnum', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateHighLevelILDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblyTextRenderer]': ...
def _BNCreateHighLevelILFunction(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNCreateHighLevelILFunctionGraph(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateIntegerType(arg0: 'int', arg1: 'ctypes.pointer[BNBoolWithConfidence]', arg2: 'str', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateIntegerTypeBuilder(arg0: 'int', arg1: 'ctypes.pointer[BNBoolWithConfidence]', arg2: 'str', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateKeyValueStore() -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNCreateKeyValueStoreFromDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNCreateLanguageRepresentationFunction(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLanguageRepresentationFunction]': ...
def _BNCreateLinearViewCursor(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewCursor]': ...
def _BNCreateLinearViewDataOnly(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewDisassembly(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewHighLevelIL(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewHighLevelILSSAForm(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewLanguageRepresentation(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewLiftedIL(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewLowLevelIL(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewLowLevelILSSAForm(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewMappedMediumLevelIL(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewMappedMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewMediumLevelIL(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionDisassembly(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionHighLevelIL(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionHighLevelILSSAForm(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionLanguageRepresentation(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionLiftedIL(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionLowLevelIL(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionLowLevelILSSAForm(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionMappedMediumLevelIL(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionMappedMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionMediumLevelIL(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLinearViewSingleFunctionMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNCreateLowLevelILDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblyTextRenderer]': ...
def _BNCreateLowLevelILFunction(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNCreateLowLevelILFunctionGraph(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateMediumLevelILDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblyTextRenderer]': ...
def _BNCreateMediumLevelILFunction(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNCreateMediumLevelILFunctionGraph(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNCreateMetadataArray(arg0: 'ctypes.pointer[ctypes.pointer[BNMetadata]]', arg1: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataBooleanData(arg0: 'bool', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataDoubleData(arg0: 'float', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataOfType(arg0: 'MetadataTypeEnum', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataRawData(arg0: 'ctypes.pointer[ctypes.c_uint8]', arg1: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataSignedIntegerData(arg0: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataStringData(arg0: 'str', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataUnsignedIntegerData(arg0: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateMetadataValueStore(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'ctypes.pointer[ctypes.pointer[BNMetadata]]', arg2: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNCreateNamedType(arg0: 'NamedTypeReferenceClassEnum', arg1: 'str', arg2: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNCreateNamedTypeBuilder(arg0: 'NamedTypeReferenceClassEnum', arg1: 'str', arg2: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNNamedTypeReferenceBuilder]': ...
def _BNCreateNamedTypeReference(arg0: 'ctypes.pointer[BNNamedTypeReference]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateNamedTypeReferenceBuilder(arg0: 'ctypes.pointer[BNNamedTypeReference]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateNamedTypeReferenceBuilderFromType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateNamedTypeReferenceBuilderFromTypeAndId(arg0: 'str', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateNamedTypeReferenceBuilderWithBuilder(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateNamedTypeReferenceFromType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateNamedTypeReferenceFromTypeAndId(arg0: 'str', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreatePlatform(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNCreatePlatformWithTypes(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'int', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNCreatePointerType(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'ctypes.pointer[BNBoolWithConfidence]', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ReferenceTypeEnum', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreatePointerTypeBuilder(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'ctypes.pointer[BNBoolWithConfidence]', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ReferenceTypeEnum', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreatePointerTypeBuilderOfWidth(arg0: 'int', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'ctypes.pointer[BNBoolWithConfidence]', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ReferenceTypeEnum', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreatePointerTypeOfWidth(arg0: 'int', arg1: 'ctypes.pointer[BNTypeWithConfidence]', arg2: 'ctypes.pointer[BNBoolWithConfidence]', arg3: 'ctypes.pointer[BNBoolWithConfidence]', arg4: 'ReferenceTypeEnum', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateRelocationHandler(arg0: 'ctypes.pointer[BNCustomRelocationHandler]', ) -> 'ctypes.pointer[BNRelocationHandler]': ...
def _BNCreateReportCollection() -> 'ctypes.pointer[BNReportCollection]': ...
def _BNCreateRepositoryManager(arg0: 'str', ) -> 'ctypes.pointer[BNRepositoryManager]': ...
def _BNCreateSaveSettings() -> 'ctypes.pointer[BNSaveSettings]': ...
def _BNCreateScriptingProviderInstance(arg0: 'ctypes.pointer[BNScriptingProvider]', ) -> 'ctypes.pointer[BNScriptingInstance]': ...
def _BNCreateSegment(arg0: 'int', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'bool', ) -> 'ctypes.pointer[BNSegment]': ...
def _BNCreateSettings(arg0: 'str', ) -> 'ctypes.pointer[BNSettings]': ...
def _BNCreateSnapshotedView(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNCreateSnapshotedViewWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'Optional[ctypes.c_void_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNCreateStructureBuilder() -> 'ctypes.pointer[BNStructureBuilder]': ...
def _BNCreateStructureBuilderFromStructure(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNStructureBuilder]': ...
def _BNCreateStructureBuilderWithOptions(arg0: 'StructureVariantEnum', arg1: 'bool', ) -> 'ctypes.pointer[BNStructureBuilder]': ...
def _BNCreateStructureFromOffsetAccess(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_bool]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNCreateStructureMemberFromAccess(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', ) -> 'BNTypeWithConfidence': ...
def _BNCreateStructureType(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateStructureTypeBuilder(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateStructureTypeBuilderWithBuilder(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateSymbol(arg0: 'SymbolTypeEnum', arg1: 'str', arg2: 'str', arg3: 'str', arg4: 'int', arg5: 'SymbolBindingEnum', arg6: 'ctypes.pointer[BNNameSpace]', arg7: 'int', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNCreateTag(arg0: 'ctypes.pointer[BNTagType]', arg1: 'str', ) -> 'ctypes.pointer[BNTag]': ...
def _BNCreateTagType(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNCreateTemporaryFile() -> 'ctypes.pointer[BNTemporaryFile]': ...
def _BNCreateTemporaryFileWithContents(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNTemporaryFile]': ...
def _BNCreateTypeBuilderFromType(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateUserFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNCreateUserStackVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNTypeWithConfidence]', arg3: 'str', ) -> 'None': ...
def _BNCreateUserVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNTypeWithConfidence]', arg3: 'str', arg4: 'bool', ) -> 'None': ...
def _BNCreateVoidType() -> 'ctypes.pointer[BNType]': ...
def _BNCreateVoidTypeBuilder() -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateWebsocketProviderClient(arg0: 'ctypes.pointer[BNWebsocketProvider]', ) -> 'ctypes.pointer[BNWebsocketClient]': ...
def _BNCreateWideCharType(arg0: 'int', arg1: 'str', ) -> 'ctypes.pointer[BNType]': ...
def _BNCreateWideCharTypeBuilder(arg0: 'int', arg1: 'str', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNCreateWorkflow(arg0: 'str', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNDataBufferToBase64(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_char_p': ...
def _BNDataBufferToEscapedString(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_char_p': ...
def _BNDatabaseHasGlobal(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'str', ) -> 'ctypes.c_int32': ...
def _BNDeauthenticateEnterpriseServer() -> 'ctypes.c_bool': ...
def _BNDecode(arg0: 'ctypes.pointer[BNTransform]', arg1: 'ctypes.pointer[BNDataBuffer]', arg2: 'ctypes.pointer[BNDataBuffer]', arg3: 'ctypes.pointer[BNTransformParameter]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNDecodeBase64(arg0: 'str', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNDecodeEscapedString(arg0: 'str', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNDefineAnalysisType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNQualifiedName]', arg3: 'ctypes.pointer[BNType]', ) -> 'BNQualifiedName': ...
def _BNDefineAnalysisTypes(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedNameAndType]', arg2: 'int', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNDefineAutoSymbol(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSymbol]', ) -> 'None': ...
def _BNDefineAutoSymbolAndVariableOrFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'ctypes.pointer[BNSymbol]', arg3: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNDefineDataVariable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNDefineImportedFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSymbol]', arg2: 'ctypes.pointer[BNFunction]', arg3: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNDefineRelocation(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNRelocationInfo]', arg3: 'int', arg4: 'int', ) -> 'None': ...
def _BNDefineSymbolRelocation(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNRelocationInfo]', arg3: 'ctypes.pointer[BNSymbol]', arg4: 'int', ) -> 'None': ...
def _BNDefineUserAnalysisType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNDefineUserAnalysisTypes(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedNameAndType]', arg2: 'int', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNDefineUserDataVariable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNDefineUserSymbol(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSymbol]', ) -> 'None': ...
def _BNDeleteAutoStackVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'None': ...
def _BNDeleteDirectory(arg0: 'str', arg1: 'int', ) -> 'ctypes.c_int32': ...
def _BNDeleteFile(arg0: 'str', ) -> 'ctypes.c_int32': ...
def _BNDeleteSecretsProviderData(arg0: 'ctypes.pointer[BNSecretsProvider]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNDeleteUserStackVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'None': ...
def _BNDeleteUserVariable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'None': ...
def _BNDemangleGNU3(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.pointer[BNType]]', arg3: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'bool', ) -> 'ctypes.c_bool': ...
def _BNDemangleGNU3WithOptions(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.pointer[BNType]]', arg3: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNDemangleMS(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.pointer[BNType]]', arg3: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'bool', ) -> 'ctypes.c_bool': ...
def _BNDemangleMSWithOptions(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.pointer[BNType]]', arg3: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNDeserializeSettings(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'SettingsScopeEnum', ) -> 'ctypes.c_bool': ...
def _BNDisablePlugins() -> 'None': ...
def _BNDisassemblyTextRendererHasDataFlow(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.c_bool': ...
def _BNDisassemblyTextRendererWrapComment(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNDisassemblyTextLine]', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'str', arg4: 'bool', arg5: 'str', arg6: 'str', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNDisconnectWebsocketClient(arg0: 'ctypes.pointer[BNWebsocketClient]', ) -> 'ctypes.c_bool': ...
def _BNDuplicateDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNDuplicateDisassemblySettings(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblySettings]': ...
def _BNDuplicateEnumerationBuilder(arg0: 'ctypes.pointer[BNEnumerationBuilder]', ) -> 'ctypes.pointer[BNEnumerationBuilder]': ...
def _BNDuplicateLinearViewCursor(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.pointer[BNLinearViewCursor]': ...
def _BNDuplicateStructureBuilder(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.pointer[BNStructureBuilder]': ...
def _BNDuplicateType(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNType]': ...
def _BNDuplicateTypeBuilder(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.pointer[BNTypeBuilder]': ...
def _BNDuplicateTypeLibrary(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNEncode(arg0: 'ctypes.pointer[BNTransform]', arg1: 'ctypes.pointer[BNDataBuffer]', arg2: 'ctypes.pointer[BNDataBuffer]', arg3: 'ctypes.pointer[BNTransformParameter]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNEndBulkModifySymbols(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNEndKeyValueStoreNamespace(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'None': ...
def _BNEscapeTypeName(arg0: 'str', arg1: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNExecuteMainThreadAction(arg0: 'ctypes.pointer[BNMainThreadAction]', ) -> 'None': ...
def _BNExecuteOnMainThread(arg0: 'Optional[ctypes.c_void_p]', arg1: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'ctypes.pointer[BNMainThreadAction]': ...
def _BNExecuteOnMainThreadAndWait(arg0: 'Optional[ctypes.c_void_p]', arg1: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'None': ...
def _BNExecuteScriptInput(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'str', ) -> 'ScriptingProviderExecuteResultEnum': ...
def _BNExecuteWorkerProcess(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_char_p]', arg2: 'ctypes.pointer[BNDataBuffer]', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'bool', arg6: 'bool', ) -> 'ctypes.c_bool': ...
def _BNFileMetadataGetSessionId(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_uint64': ...
def _BNFileSize(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNFinalizeArchitectureHook(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'None': ...
def _BNFinalizeEnumerationBuilder(arg0: 'ctypes.pointer[BNEnumerationBuilder]', ) -> 'ctypes.pointer[BNEnumeration]': ...
def _BNFinalizeHighLevelILFunction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'None': ...
def _BNFinalizeLowLevelILFunction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNFinalizeMediumLevelILFunction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'None': ...
def _BNFinalizeNamedTypeReferenceBuilder(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNFinalizeStructureBuilder(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNFinalizeTypeBuilder(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.pointer[BNType]': ...
def _BNFinalizeTypeLibrary(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'None': ...
def _BNFindAllConstantWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[BNDisassemblySettings]', arg5: 'FunctionGraphTypeEnum', arg6: 'Optional[ctypes.c_void_p]', arg7: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg8: 'Optional[ctypes.c_void_p]', arg9: 'Callable[[Optional[ctypes.c_void_p], int, ctypes.pointer[BNLinearDisassemblyLine], ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFindAllDataWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNDataBuffer]', arg4: 'FindFlagEnum', arg5: 'Optional[ctypes.c_void_p]', arg6: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg7: 'Optional[ctypes.c_void_p]', arg8: 'Callable[[Optional[ctypes.c_void_p], int, ctypes.pointer[BNDataBuffer], ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFindAllTextWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'str', arg4: 'ctypes.pointer[BNDisassemblySettings]', arg5: 'FindFlagEnum', arg6: 'FunctionGraphTypeEnum', arg7: 'Optional[ctypes.c_void_p]', arg8: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg9: 'Optional[ctypes.c_void_p]', arg10: 'Callable[[Optional[ctypes.c_void_p], int, str, ctypes.pointer[BNLinearDisassemblyLine], ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFindNextConstant(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[BNDisassemblySettings]', arg5: 'FunctionGraphTypeEnum', ) -> 'ctypes.c_bool': ...
def _BNFindNextConstantWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNDisassemblySettings]', arg6: 'FunctionGraphTypeEnum', arg7: 'Optional[ctypes.c_void_p]', arg8: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFindNextData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNDataBuffer]', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'FindFlagEnum', ) -> 'ctypes.c_bool': ...
def _BNFindNextDataWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNDataBuffer]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'FindFlagEnum', arg6: 'Optional[ctypes.c_void_p]', arg7: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFindNextText(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'str', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[BNDisassemblySettings]', arg5: 'FindFlagEnum', arg6: 'FunctionGraphTypeEnum', ) -> 'ctypes.c_bool': ...
def _BNFindNextTextWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'str', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNDisassemblySettings]', arg6: 'FindFlagEnum', arg7: 'FunctionGraphTypeEnum', arg8: 'Optional[ctypes.c_void_p]', arg9: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNFinishBackgroundTask(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'None': ...
def _BNFinishPrepareForLayout(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'None': ...
def _BNFlowGraphHasNodes(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNFlowGraphHasUpdates(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNFlowGraphUpdateQueryMode(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNFreeActivity(arg0: 'ctypes.pointer[BNActivity]', ) -> 'None': ...
def _BNFreeAddressList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNFreeAddressRanges(arg0: 'ctypes.pointer[BNAddressRange]', ) -> 'None': ...
def _BNFreeAnalysisCompletionEvent(arg0: 'ctypes.pointer[BNAnalysisCompletionEvent]', ) -> 'None': ...
def _BNFreeAnalysisContext(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'None': ...
def _BNFreeAnalysisInfo(arg0: 'ctypes.pointer[BNAnalysisInfo]', ) -> 'None': ...
def _BNFreeAnalysisPerformanceInfo(arg0: 'ctypes.pointer[BNPerformanceInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeArchitectureList(arg0: 'ctypes.pointer[ctypes.pointer[BNArchitecture]]', ) -> 'None': ...
def _BNFreeBackgroundTask(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'None': ...
def _BNFreeBackgroundTaskList(arg0: 'ctypes.pointer[ctypes.pointer[BNBackgroundTask]]', arg1: 'int', ) -> 'None': ...
def _BNFreeBasicBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNFreeBasicBlockEdgeList(arg0: 'ctypes.pointer[BNBasicBlockEdge]', arg1: 'int', ) -> 'None': ...
def _BNFreeBasicBlockList(arg0: 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]', arg1: 'int', ) -> 'None': ...
def _BNFreeBinaryReader(arg0: 'ctypes.pointer[BNBinaryReader]', ) -> 'None': ...
def _BNFreeBinaryView(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNFreeBinaryViewTypeList(arg0: 'ctypes.pointer[ctypes.pointer[BNBinaryViewType]]', ) -> 'None': ...
def _BNFreeBinaryWriter(arg0: 'ctypes.pointer[BNBinaryWriter]', ) -> 'None': ...
def _BNFreeCallingConvention(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNFreeCallingConventionList(arg0: 'ctypes.pointer[ctypes.pointer[BNCallingConvention]]', arg1: 'int', ) -> 'None': ...
def _BNFreeCodeReferences(arg0: 'ctypes.pointer[BNReferenceSource]', arg1: 'int', ) -> 'None': ...
def _BNFreeConstantReferenceList(arg0: 'ctypes.pointer[BNConstantReference]', ) -> 'None': ...
def _BNFreeDataBuffer(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'None': ...
def _BNFreeDataReferences(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNFreeDataRenderer(arg0: 'ctypes.pointer[BNDataRenderer]', ) -> 'None': ...
def _BNFreeDataVariables(arg0: 'ctypes.pointer[BNDataVariable]', arg1: 'int', ) -> 'None': ...
def _BNFreeDataVariablesAndName(arg0: 'ctypes.pointer[BNDataVariableAndName]', arg1: 'int', ) -> 'None': ...
def _BNFreeDatabase(arg0: 'ctypes.pointer[BNDatabase]', ) -> 'None': ...
def _BNFreeDebugFunctions(arg0: 'ctypes.pointer[BNDebugFunctionInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeDebugInfoParserList(arg0: 'ctypes.pointer[ctypes.pointer[BNDebugInfoParser]]', arg1: 'int', ) -> 'None': ...
def _BNFreeDebugInfoParserReference(arg0: 'ctypes.pointer[BNDebugInfoParser]', ) -> 'None': ...
def _BNFreeDebugInfoReference(arg0: 'ctypes.pointer[BNDebugInfo]', ) -> 'None': ...
def _BNFreeDebugTypes(arg0: 'ctypes.pointer[BNNameAndType]', arg1: 'int', ) -> 'None': ...
def _BNFreeDemangledName(arg0: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg1: 'int', ) -> 'None': ...
def _BNFreeDisassemblySettings(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'None': ...
def _BNFreeDisassemblyTextLines(arg0: 'ctypes.pointer[BNDisassemblyTextLine]', arg1: 'int', ) -> 'None': ...
def _BNFreeDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'None': ...
def _BNFreeDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', ) -> 'None': ...
def _BNFreeDownloadInstanceResponse(arg0: 'ctypes.pointer[BNDownloadInstanceResponse]', ) -> 'None': ...
def _BNFreeDownloadProviderList(arg0: 'ctypes.pointer[ctypes.pointer[BNDownloadProvider]]', ) -> 'None': ...
def _BNFreeEnumeration(arg0: 'ctypes.pointer[BNEnumeration]', ) -> 'None': ...
def _BNFreeEnumerationBuilder(arg0: 'ctypes.pointer[BNEnumerationBuilder]', ) -> 'None': ...
def _BNFreeEnumerationMemberList(arg0: 'ctypes.pointer[BNEnumerationMember]', arg1: 'int', ) -> 'None': ...
def _BNFreeFileMetadata(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNFreeFlagConditionsForSemanticFlagGroup(arg0: 'ctypes.pointer[BNFlagConditionForSemanticClass]', ) -> 'None': ...
def _BNFreeFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'None': ...
def _BNFreeFlowGraphLayoutRequest(arg0: 'ctypes.pointer[BNFlowGraphLayoutRequest]', ) -> 'None': ...
def _BNFreeFlowGraphNode(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'None': ...
def _BNFreeFlowGraphNodeEdgeList(arg0: 'ctypes.pointer[BNFlowGraphEdge]', arg1: 'int', ) -> 'None': ...
def _BNFreeFlowGraphNodeList(arg0: 'ctypes.pointer[ctypes.pointer[BNFlowGraphNode]]', arg1: 'int', ) -> 'None': ...
def _BNFreeFormInputResults(arg0: 'ctypes.pointer[BNFormInputField]', arg1: 'int', ) -> 'None': ...
def _BNFreeFunction(arg0: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNFreeFunctionList(arg0: 'ctypes.pointer[ctypes.pointer[BNFunction]]', arg1: 'int', ) -> 'None': ...
def _BNFreeHighLevelILFunction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'None': ...
def _BNFreeILBranchDependenceList(arg0: 'ctypes.pointer[BNILBranchInstructionAndDependence]', ) -> 'None': ...
def _BNFreeILInstructionList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNFreeILReferences(arg0: 'ctypes.pointer[BNILReferenceSource]', arg1: 'int', ) -> 'None': ...
def _BNFreeIndirectBranchList(arg0: 'ctypes.pointer[BNIndirectBranchInfo]', ) -> 'None': ...
def _BNFreeInstructionText(arg0: 'ctypes.pointer[BNInstructionTextToken]', arg1: 'int', ) -> 'None': ...
def _BNFreeInstructionTextLines(arg0: 'ctypes.pointer[BNInstructionTextLine]', arg1: 'int', ) -> 'None': ...
def _BNFreeKeyValueStore(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'None': ...
def _BNFreeLLILVariableVersionList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNFreeLLILVariablesList(arg0: 'ctypes.pointer[ctypes.c_uint32]', ) -> 'None': ...
def _BNFreeLanguageRepresentationFunction(arg0: 'ctypes.pointer[BNLanguageRepresentationFunction]', ) -> 'None': ...
def _BNFreeLinearDisassemblyLines(arg0: 'ctypes.pointer[BNLinearDisassemblyLine]', arg1: 'int', ) -> 'None': ...
def _BNFreeLinearViewCursor(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'None': ...
def _BNFreeLinearViewCursorPath(arg0: 'ctypes.pointer[BNLinearViewObjectIdentifier]', arg1: 'int', ) -> 'None': ...
def _BNFreeLinearViewCursorPathObjects(arg0: 'ctypes.pointer[ctypes.pointer[BNLinearViewObject]]', arg1: 'int', ) -> 'None': ...
def _BNFreeLinearViewObject(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'None': ...
def _BNFreeLinearViewObjectIdentifier(arg0: 'ctypes.pointer[BNLinearViewObjectIdentifier]', ) -> 'None': ...
def _BNFreeLogger(arg0: 'ctypes.pointer[BNLogger]', ) -> 'None': ...
def _BNFreeLowLevelILFunction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNFreeMainThreadAction(arg0: 'ctypes.pointer[BNMainThreadAction]', ) -> 'None': ...
def _BNFreeMediumLevelILFunction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'None': ...
def _BNFreeMemoryUsageInfo(arg0: 'ctypes.pointer[BNMemoryUsageInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeMetadata(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'None': ...
def _BNFreeMetadataArray(arg0: 'ctypes.pointer[ctypes.pointer[BNMetadata]]', ) -> 'None': ...
def _BNFreeMetadataRaw(arg0: 'ctypes.pointer[ctypes.c_uint8]', ) -> 'None': ...
def _BNFreeMetadataValueStore(arg0: 'ctypes.pointer[BNMetadataValueStore]', ) -> 'None': ...
def _BNFreeNameAndTypeList(arg0: 'ctypes.pointer[BNNameAndType]', arg1: 'int', ) -> 'None': ...
def _BNFreeNameSpace(arg0: 'ctypes.pointer[BNNameSpace]', ) -> 'None': ...
def _BNFreeNameSpaceList(arg0: 'ctypes.pointer[BNNameSpace]', arg1: 'int', ) -> 'None': ...
def _BNFreeNamedTypeReference(arg0: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'None': ...
def _BNFreeNamedTypeReferenceBuilder(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', ) -> 'None': ...
def _BNFreeOutputTypeList(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'int', ) -> 'None': ...
def _BNFreeParameterVariables(arg0: 'ctypes.pointer[BNParameterVariablesWithConfidence]', ) -> 'None': ...
def _BNFreeParseError(arg0: 'str', ) -> 'None': ...
def _BNFreePath(arg0: 'str', ) -> 'None': ...
def _BNFreePlatform(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNFreePlatformList(arg0: 'ctypes.pointer[ctypes.pointer[BNPlatform]]', arg1: 'int', ) -> 'None': ...
def _BNFreePlatformOSList(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'None': ...
def _BNFreePlugin(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'None': ...
def _BNFreePluginCommandList(arg0: 'ctypes.pointer[BNPluginCommand]', ) -> 'None': ...
def _BNFreePluginPlatforms(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'None': ...
def _BNFreePluginTypes(arg0: 'ctypes.pointer[PluginTypeEnum]', ) -> 'None': ...
def _BNFreePossibleValueSet(arg0: 'ctypes.pointer[BNPossibleValueSet]', ) -> 'None': ...
def _BNFreeQualifiedName(arg0: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNFreeQualifiedNameAndType(arg0: 'ctypes.pointer[BNQualifiedNameAndType]', ) -> 'None': ...
def _BNFreeQualifiedNameAndTypeArray(arg0: 'ctypes.pointer[BNQualifiedNameAndType]', arg1: 'int', ) -> 'None': ...
def _BNFreeRegisterList(arg0: 'ctypes.pointer[ctypes.c_uint32]', ) -> 'None': ...
def _BNFreeRegisterSet(arg0: 'ctypes.pointer[BNRegisterSetWithConfidence]', ) -> 'None': ...
def _BNFreeRegisterStackAdjustments(arg0: 'ctypes.pointer[BNRegisterStackAdjustment]', ) -> 'None': ...
def _BNFreeRelocation(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'None': ...
def _BNFreeRelocationHandler(arg0: 'ctypes.pointer[BNRelocationHandler]', ) -> 'None': ...
def _BNFreeRelocationRanges(arg0: 'ctypes.pointer[BNRange]', ) -> 'None': ...
def _BNFreeReportCollection(arg0: 'ctypes.pointer[BNReportCollection]', ) -> 'None': ...
def _BNFreeRepository(arg0: 'ctypes.pointer[BNRepository]', ) -> 'None': ...
def _BNFreeRepositoryManager(arg0: 'ctypes.pointer[BNRepositoryManager]', ) -> 'None': ...
def _BNFreeRepositoryManagerRepositoriesList(arg0: 'ctypes.pointer[ctypes.pointer[BNRepository]]', ) -> 'None': ...
def _BNFreeRepositoryPluginList(arg0: 'ctypes.pointer[ctypes.pointer[BNRepoPlugin]]', ) -> 'None': ...
def _BNFreeSaveSettings(arg0: 'ctypes.pointer[BNSaveSettings]', ) -> 'None': ...
def _BNFreeScriptingInstance(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'None': ...
def _BNFreeScriptingProviderList(arg0: 'ctypes.pointer[ctypes.pointer[BNScriptingProvider]]', ) -> 'None': ...
def _BNFreeSecretsProviderList(arg0: 'ctypes.pointer[ctypes.pointer[BNSecretsProvider]]', ) -> 'None': ...
def _BNFreeSection(arg0: 'ctypes.pointer[BNSection]', ) -> 'None': ...
def _BNFreeSectionList(arg0: 'ctypes.pointer[ctypes.pointer[BNSection]]', arg1: 'int', ) -> 'None': ...
def _BNFreeSegment(arg0: 'ctypes.pointer[BNSegment]', ) -> 'None': ...
def _BNFreeSegmentList(arg0: 'ctypes.pointer[ctypes.pointer[BNSegment]]', arg1: 'int', ) -> 'None': ...
def _BNFreeSettings(arg0: 'ctypes.pointer[BNSettings]', ) -> 'None': ...
def _BNFreeSnapshot(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'None': ...
def _BNFreeSnapshotList(arg0: 'ctypes.pointer[ctypes.pointer[BNSnapshot]]', arg1: 'int', ) -> 'None': ...
def _BNFreeStackVariableReferenceList(arg0: 'ctypes.pointer[BNStackVariableReference]', arg1: 'int', ) -> 'None': ...
def _BNFreeString(arg0: 'str', ) -> 'None': ...
def _BNFreeStringList(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'None': ...
def _BNFreeStringReferenceList(arg0: 'ctypes.pointer[BNStringReference]', ) -> 'None': ...
def _BNFreeStructure(arg0: 'ctypes.pointer[BNStructure]', ) -> 'None': ...
def _BNFreeStructureBuilder(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'None': ...
def _BNFreeStructureMember(arg0: 'ctypes.pointer[BNStructureMember]', ) -> 'None': ...
def _BNFreeStructureMemberList(arg0: 'ctypes.pointer[BNStructureMember]', arg1: 'int', ) -> 'None': ...
def _BNFreeSymbol(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'None': ...
def _BNFreeSymbolList(arg0: 'ctypes.pointer[ctypes.pointer[BNSymbol]]', arg1: 'int', ) -> 'None': ...
def _BNFreeSymbolRawBytes(arg0: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNFreeSystemCallList(arg0: 'ctypes.pointer[BNSystemCallInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeTag(arg0: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNFreeTagList(arg0: 'ctypes.pointer[ctypes.pointer[BNTag]]', arg1: 'int', ) -> 'None': ...
def _BNFreeTagReferenceTypeCounts(arg0: 'ctypes.pointer[ctypes.pointer[BNTagType]]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNFreeTagReferences(arg0: 'ctypes.pointer[BNTagReference]', arg1: 'int', ) -> 'None': ...
def _BNFreeTagType(arg0: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNFreeTagTypeList(arg0: 'ctypes.pointer[ctypes.pointer[BNTagType]]', arg1: 'int', ) -> 'None': ...
def _BNFreeTemporaryFile(arg0: 'ctypes.pointer[BNTemporaryFile]', ) -> 'None': ...
def _BNFreeTransformParameterList(arg0: 'ctypes.pointer[BNTransformParameterInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeTransformTypeList(arg0: 'ctypes.pointer[ctypes.pointer[BNTransform]]', ) -> 'None': ...
def _BNFreeType(arg0: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNFreeTypeBuilder(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'None': ...
def _BNFreeTypeDefinitionLineList(arg0: 'ctypes.pointer[BNTypeDefinitionLine]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeFieldReferenceSizeInfo(arg0: 'ctypes.pointer[BNTypeFieldReferenceSizeInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeFieldReferenceSizes(arg0: 'ctypes.pointer[ctypes.c_uint64]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeFieldReferenceTypeInfo(arg0: 'ctypes.pointer[BNTypeFieldReferenceTypeInfo]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeFieldReferenceTypes(arg0: 'ctypes.pointer[BNTypeWithConfidence]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeFieldReferences(arg0: 'ctypes.pointer[BNTypeFieldReference]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeIdList(arg0: 'ctypes.pointer[BNQualifiedNameTypeAndId]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeLibrary(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'None': ...
def _BNFreeTypeLibraryList(arg0: 'ctypes.pointer[ctypes.pointer[BNTypeLibrary]]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeList(arg0: 'ctypes.pointer[BNQualifiedNameAndType]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeNameList(arg0: 'ctypes.pointer[BNQualifiedName]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeParameterList(arg0: 'ctypes.pointer[BNFunctionParameter]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeParserErrors(arg0: 'ctypes.pointer[BNTypeParserError]', arg1: 'int', ) -> 'None': ...
def _BNFreeTypeParserList(arg0: 'ctypes.pointer[ctypes.pointer[BNTypeParser]]', ) -> 'None': ...
def _BNFreeTypeParserResult(arg0: 'ctypes.pointer[BNTypeParserResult]', ) -> 'None': ...
def _BNFreeTypePrinterList(arg0: 'ctypes.pointer[ctypes.pointer[BNTypePrinter]]', ) -> 'None': ...
def _BNFreeTypeReferences(arg0: 'ctypes.pointer[BNTypeReferenceSource]', arg1: 'int', ) -> 'None': ...
def _BNFreeUndoEntries(arg0: 'ctypes.pointer[BNUndoEntry]', arg1: 'int', ) -> 'None': ...
def _BNFreeUpdateChannelList(arg0: 'ctypes.pointer[BNUpdateChannel]', arg1: 'int', ) -> 'None': ...
def _BNFreeUpdateChannelVersionList(arg0: 'ctypes.pointer[BNUpdateVersion]', arg1: 'int', ) -> 'None': ...
def _BNFreeUser(arg0: 'ctypes.pointer[BNUser]', ) -> 'None': ...
def _BNFreeUserList(arg0: 'ctypes.pointer[ctypes.pointer[BNUser]]', arg1: 'int', ) -> 'None': ...
def _BNFreeUserVariableValues(arg0: 'ctypes.pointer[BNUserVariableValue]', ) -> 'None': ...
def _BNFreeVariableList(arg0: 'ctypes.pointer[BNVariable]', ) -> 'None': ...
def _BNFreeVariableNameAndType(arg0: 'ctypes.pointer[BNVariableNameAndType]', ) -> 'None': ...
def _BNFreeVariableNameAndTypeList(arg0: 'ctypes.pointer[BNVariableNameAndType]', arg1: 'int', ) -> 'None': ...
def _BNFreeVariableReferenceSourceList(arg0: 'ctypes.pointer[BNVariableReferenceSource]', arg1: 'int', ) -> 'None': ...
def _BNFreeWebsocketClient(arg0: 'ctypes.pointer[BNWebsocketClient]', ) -> 'None': ...
def _BNFreeWebsocketProviderList(arg0: 'ctypes.pointer[ctypes.pointer[BNWebsocketProvider]]', ) -> 'None': ...
def _BNFreeWorkflow(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'None': ...
def _BNFreeWorkflowList(arg0: 'ctypes.pointer[ctypes.pointer[BNWorkflow]]', arg1: 'int', ) -> 'None': ...
def _BNFromVariableIdentifier(arg0: 'int', ) -> 'BNVariable': ...
def _BNFunctionHasExplicitlyDefinedType(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNFunctionHasUserAnnotations(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNFunctionHasVariableArguments(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNBoolWithConfidence': ...
def _BNFunctionTypeBuilderCanReturn(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNBoolWithConfidence': ...
def _BNFunctionTypeCanReturn(arg0: 'ctypes.pointer[BNType]', ) -> 'BNBoolWithConfidence': ...
def _BNGenerateAutoDebugTypeId(arg0: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGenerateAutoDemangledTypeId(arg0: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGenerateAutoPlatformTypeId(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGenerateAutoTypeId(arg0: 'str', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGenerateHighLevelILSSAForm(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'None': ...
def _BNGenerateLowLevelILSSAForm(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNGenerateMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'bool', arg2: 'bool', arg3: 'ctypes.pointer[BNVariable]', arg4: 'int', arg5: 'ctypes.pointer[BNVariable]', arg6: 'int', ) -> 'None': ...
def _BNGetActiveUpdateChannel() -> 'ctypes.c_char_p': ...
def _BNGetAddressForDataOffset(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetAddressInput(arg0: 'ctypes.pointer[ctypes.c_uint64]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[BNBinaryView]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNGetAddressRenderedWidth(arg0: 'int', ) -> 'ctypes.c_uint32': ...
def _BNGetAddressTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAddressTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAddressTagsInRange(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAddressTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTagType]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAllAddressTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAllArchitectureFlagWriteTypes(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureFlags(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureIntrinsics(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureRegisterStacks(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureRegisters(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureSemanticFlagClasses(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllArchitectureSemanticFlagGroups(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetAllFieldsReferenced(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetAllFunctionTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAllMediumLevelILBranchDependence(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNILBranchInstructionAndDependence]': ...
def _BNGetAllPluginCommands(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetAllSizesReferenced(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeFieldReferenceSizeInfo]': ...
def _BNGetAllTagReferenceTypeCounts(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.pointer[ctypes.pointer[BNTagType]]]', arg2: 'ctypes.pointer[ctypes.pointer[ctypes.c_uint64]]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNGetAllTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAllTagReferencesOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAllTagReferencesOfTypeCount(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_uint64': ...
def _BNGetAllTypesReferenced(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeFieldReferenceTypeInfo]': ...
def _BNGetAllUserVariableValues(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNUserVariableValue]': ...
def _BNGetAllocatedRanges(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNAddressRange]': ...
def _BNGetAnalysisEntryPoint(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetAnalysisFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetAnalysisFunctionList(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNFunction]]': ...
def _BNGetAnalysisFunctionsContainingAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNFunction]]': ...
def _BNGetAnalysisFunctionsForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNFunction]]': ...
def _BNGetAnalysisInfo(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNAnalysisInfo]': ...
def _BNGetAnalysisProgress(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'BNAnalysisProgress': ...
def _BNGetAnalysisSkipReason(arg0: 'ctypes.pointer[BNFunction]', ) -> 'AnalysisSkipReasonEnum': ...
def _BNGetAnalysisTypeById(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetAnalysisTypeByName(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetAnalysisTypeId(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGetAnalysisTypeList(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetAnalysisTypeNameById(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'BNQualifiedName': ...
def _BNGetAnalysisTypeNames(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'str', ) -> 'ctypes.pointer[BNQualifiedName]': ...
def _BNGetArchitectureAddressSize(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureByName(arg0: 'str', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetArchitectureCallingConventionByName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetArchitectureCallingConventions(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNCallingConvention]]': ...
def _BNGetArchitectureCdeclCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetArchitectureDefaultCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetArchitectureDefaultIntegerSize(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureEndianness(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'EndiannessEnum': ...
def _BNGetArchitectureFastcallCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetArchitectureFlagConditionLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'LowLevelILFlagConditionEnum', arg2: 'int', arg3: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureFlagConditionsForSemanticFlagGroup(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNFlagConditionForSemanticClass]': ...
def _BNGetArchitectureFlagName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureFlagRole(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'int', ) -> 'FlagRoleEnum': ...
def _BNGetArchitectureFlagWriteLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'LowLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'ctypes.pointer[BNRegisterOrConstant]', arg6: 'int', arg7: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureFlagWriteTypeName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureFlagsRequiredForFlagCondition(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'LowLevelILFlagConditionEnum', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetArchitectureFlagsRequiredForSemanticFlagGroup(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetArchitectureFlagsWrittenByFlagWriteType(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetArchitectureForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'EndiannessEnum', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetArchitectureGlobalRegisters(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetArchitectureInstructionAlignment(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureIntrinsicInputs(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNNameAndType]': ...
def _BNGetArchitectureIntrinsicName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureIntrinsicOutputs(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeWithConfidence]': ...
def _BNGetArchitectureLinkRegister(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint32': ...
def _BNGetArchitectureList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNArchitecture]]': ...
def _BNGetArchitectureMaxInstructionLength(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureName(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureOpcodeDisplayLength(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureRegisterByName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.c_uint32': ...
def _BNGetArchitectureRegisterInfo(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'BNRegisterInfo': ...
def _BNGetArchitectureRegisterName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureRegisterStackForRegister(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_uint32': ...
def _BNGetArchitectureRegisterStackInfo(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'BNRegisterStackInfo': ...
def _BNGetArchitectureRegisterStackName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureSemanticClassForFlagWriteType(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_uint32': ...
def _BNGetArchitectureSemanticFlagClassName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureSemanticFlagGroupLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetArchitectureSemanticFlagGroupName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetArchitectureStackPointerRegister(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.c_uint32': ...
def _BNGetArchitectureStandalonePlatform(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetArchitectureStdcallCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetArchitectureSystemRegisters(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetArchitectureTypeLibraries(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypeLibrary]]': ...
def _BNGetAssociatedArchitectureByAddress(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetAssociatedPlatformByAddress(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetAutoAddressTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAutoAddressTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoAddressTagsInRange(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAutoAddressTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTagType]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoDataTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAutoDataTags(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoDataTagsInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAutoDataTagsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTagType]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoDebugTypeIdSource() -> 'ctypes.c_char_p': ...
def _BNGetAutoDemangledTypeIdSource() -> 'ctypes.c_char_p': ...
def _BNGetAutoFunctionTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetAutoFunctionTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoFunctionTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetAutoPlatformTypeIdSource(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.c_char_p': ...
def _BNGetBackgroundAnalysisTask(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBackgroundTask]': ...
def _BNGetBackgroundTaskProgressText(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'ctypes.c_char_p': ...
def _BNGetBasicBlockArchitecture(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetBasicBlockDisassemblyText(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[BNDisassemblySettings]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNGetBasicBlockDominanceFrontier(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'bool', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlockDominatorTreeChildren(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'bool', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlockDominators(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'bool', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlockEnd(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_uint64': ...
def _BNGetBasicBlockFunction(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetBasicBlockFunctionGraphType(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'FunctionGraphTypeEnum': ...
def _BNGetBasicBlockHighLevelILFunction(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetBasicBlockHighlight(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'BNHighlightColor': ...
def _BNGetBasicBlockImmediateDominator(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'bool', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetBasicBlockIncomingEdges(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNBasicBlockEdge]': ...
def _BNGetBasicBlockIndex(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_uint64': ...
def _BNGetBasicBlockInstructionContainingAddress(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetBasicBlockIteratedDominanceFrontier(arg0: 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlockLength(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_uint64': ...
def _BNGetBasicBlockLowLevelILFunction(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetBasicBlockMediumLevelILFunction(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetBasicBlockOutgoingEdges(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNBasicBlockEdge]': ...
def _BNGetBasicBlockSource(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetBasicBlockSourceBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetBasicBlockStart(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_uint64': ...
def _BNGetBasicBlockStrictDominators(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'bool', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlocksForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBasicBlocksStartingAtAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetBinaryReaderEndianness(arg0: 'ctypes.pointer[BNBinaryReader]', ) -> 'EndiannessEnum': ...
def _BNGetBinaryViewDefaultLoadSettingsForData(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNSettings]': ...
def _BNGetBinaryViewLoadSettingsForData(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNSettings]': ...
def _BNGetBinaryViewTypeArchitectureConstant(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'str', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetBinaryViewTypeByName(arg0: 'str', ) -> 'ctypes.pointer[BNBinaryViewType]': ...
def _BNGetBinaryViewTypeLibraries(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypeLibrary]]': ...
def _BNGetBinaryViewTypeLibrary(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNGetBinaryViewTypeLongName(arg0: 'ctypes.pointer[BNBinaryViewType]', ) -> 'ctypes.c_char_p': ...
def _BNGetBinaryViewTypeName(arg0: 'ctypes.pointer[BNBinaryViewType]', ) -> 'ctypes.c_char_p': ...
def _BNGetBinaryViewTypes(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBinaryViewType]]': ...
def _BNGetBinaryViewTypesForData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBinaryViewType]]': ...
def _BNGetBinaryWriterEndianness(arg0: 'ctypes.pointer[BNBinaryWriter]', ) -> 'EndiannessEnum': ...
def _BNGetBuildId() -> 'ctypes.c_uint32': ...
def _BNGetBundledPluginDirectory() -> 'ctypes.c_char_p': ...
def _BNGetCallRegisterStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRegisterStackAdjustment]': ...
def _BNGetCallRegisterStackAdjustmentForRegisterStack(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'BNRegisterStackAdjustment': ...
def _BNGetCallStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'BNOffsetWithConfidence': ...
def _BNGetCallTypeAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'BNTypeWithConfidence': ...
def _BNGetCalleeSavedRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetCallees(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetCallerSavedRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetCallers(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNReferenceSource]': ...
def _BNGetCallingConventionArchitecture(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetCallingConventionName(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_char_p': ...
def _BNGetChildType(arg0: 'ctypes.pointer[BNType]', ) -> 'BNTypeWithConfidence': ...
def _BNGetChoiceInput(arg0: 'ctypes.pointer[ctypes.c_uint64]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNGetCodeReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNReferenceSource]': ...
def _BNGetCodeReferencesForType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNReferenceSource]': ...
def _BNGetCodeReferencesForTypeField(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeFieldReference]': ...
def _BNGetCodeReferencesForTypeFieldsFrom(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetCodeReferencesForTypeFieldsFromInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetCodeReferencesForTypeFrom(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetCodeReferencesForTypeFromInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetCodeReferencesFrom(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetCodeReferencesFromInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNReferenceSource]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetCodeReferencesInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNReferenceSource]': ...
def _BNGetCommentForAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetCommentedAddresses(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetConstantsReferencedByInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNConstantReference]': ...
def _BNGetConstantsReferencedByInstructionIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNConstantReference]': ...
def _BNGetCurrentCoreABIVersion() -> 'ctypes.c_uint32': ...
def _BNGetCurrentOffset(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_uint64': ...
def _BNGetCurrentView(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_char_p': ...
def _BNGetDataBufferByte(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'int', ) -> 'ctypes.c_uint8': ...
def _BNGetDataBufferContents(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'Optional[ctypes.c_void_p]': ...
def _BNGetDataBufferContentsAt(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'int', ) -> 'Optional[ctypes.c_void_p]': ...
def _BNGetDataBufferLength(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_uint64': ...
def _BNGetDataBufferSlice(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'int', arg2: 'int', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetDataReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataReferencesForType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataReferencesForTypeField(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataReferencesFrom(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataReferencesFromInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataReferencesInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetDataRendererContainer() -> 'ctypes.pointer[BNDataRendererContainer]': ...
def _BNGetDataTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetDataTags(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetDataTagsInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetDataTagsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTagType]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetDataVariableAtAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNDataVariable]', ) -> 'ctypes.c_bool': ...
def _BNGetDataVariables(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDataVariable]': ...
def _BNGetDatabaseCurrentSnapshot(arg0: 'ctypes.pointer[BNDatabase]', ) -> 'ctypes.pointer[BNSnapshot]': ...
def _BNGetDatabaseFile(arg0: 'ctypes.pointer[BNDatabase]', ) -> 'ctypes.pointer[BNFileMetadata]': ...
def _BNGetDatabaseGlobalKeys(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetDatabaseSnapshot(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'int', ) -> 'ctypes.pointer[BNSnapshot]': ...
def _BNGetDatabaseSnapshots(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSnapshot]]': ...
def _BNGetDebugDataVariables(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDataVariableAndName]': ...
def _BNGetDebugFunctions(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDebugFunctionInfo]': ...
def _BNGetDebugInfo(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNDebugInfo]': ...
def _BNGetDebugInfoParserByName(arg0: 'str', ) -> 'ctypes.pointer[BNDebugInfoParser]': ...
def _BNGetDebugInfoParserName(arg0: 'ctypes.pointer[BNDebugInfoParser]', ) -> 'ctypes.c_char_p': ...
def _BNGetDebugInfoParsers(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNDebugInfoParser]]': ...
def _BNGetDebugInfoParsersForView(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNDebugInfoParser]]': ...
def _BNGetDebugTypes(arg0: 'ctypes.pointer[BNDebugInfo]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNNameAndType]': ...
def _BNGetDefaultArchitecture(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetDefaultArchitectureFlagConditionLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'LowLevelILFlagConditionEnum', arg2: 'int', arg3: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetDefaultArchitectureFlagWriteLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'LowLevelILOperationEnum', arg2: 'int', arg3: 'FlagRoleEnum', arg4: 'ctypes.pointer[BNRegisterOrConstant]', arg5: 'int', arg6: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetDefaultEndianness(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'EndiannessEnum': ...
def _BNGetDefaultIncomingVariableForParameterVariable(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'BNVariable': ...
def _BNGetDefaultParameterVariableForIncomingVariable(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'BNVariable': ...
def _BNGetDefaultPlatform(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetDirectoryNameInput(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetDisassemblyGutterWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.c_uint64': ...
def _BNGetDisassemblyMaximumSymbolWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.c_uint64': ...
def _BNGetDisassemblyTextRendererArchitecture(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetDisassemblyTextRendererBasicBlock(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetDisassemblyTextRendererFunction(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetDisassemblyTextRendererHighLevelILFunction(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetDisassemblyTextRendererInstructionAnnotations(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetDisassemblyTextRendererInstructionText(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[ctypes.pointer[BNDisassemblyTextLine]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetDisassemblyTextRendererIntegerTokens(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNInstructionTextToken]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetDisassemblyTextRendererLines(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[ctypes.pointer[BNDisassemblyTextLine]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetDisassemblyTextRendererLowLevelILFunction(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetDisassemblyTextRendererMediumLevelILFunction(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetDisassemblyTextRendererSettings(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNDisassemblySettings]': ...
def _BNGetDisassemblyTextRendererStackVariableReferenceTokens(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNStackVariableReference]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetDisassemblyTextRendererSymbolTokens(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg5: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetDisassemblyWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.c_uint64': ...
def _BNGetDisplayStringForInteger(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'IntegerDisplayTypeEnum', arg2: 'int', arg3: 'int', arg4: 'bool', ) -> 'ctypes.c_char_p': ...
def _BNGetDownloadProviderByName(arg0: 'str', ) -> 'ctypes.pointer[BNDownloadProvider]': ...
def _BNGetDownloadProviderList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNDownloadProvider]]': ...
def _BNGetDownloadProviderName(arg0: 'ctypes.pointer[BNDownloadProvider]', ) -> 'ctypes.c_char_p': ...
def _BNGetEndOffset(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetEnterpriseServerAuthenticationMethods(arg0: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', arg1: 'ctypes.pointer[ctypes.pointer[ctypes.c_char_p]]', ) -> 'ctypes.c_uint64': ...
def _BNGetEnterpriseServerBuildId() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerId() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerLastError() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerLicenseDuration() -> 'ctypes.c_uint64': ...
def _BNGetEnterpriseServerLicenseExpirationTime() -> 'ctypes.c_uint64': ...
def _BNGetEnterpriseServerName() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerReservationTimeLimit() -> 'ctypes.c_uint64': ...
def _BNGetEnterpriseServerToken() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerUrl() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerUsername() -> 'ctypes.c_char_p': ...
def _BNGetEnterpriseServerVersion() -> 'ctypes.c_uint64': ...
def _BNGetEntropy(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_float]', ) -> 'ctypes.c_uint64': ...
def _BNGetEntryPoint(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetEnumerationBuilderMembers(arg0: 'ctypes.pointer[BNEnumerationBuilder]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNEnumerationMember]': ...
def _BNGetEnumerationMembers(arg0: 'ctypes.pointer[BNEnumeration]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNEnumerationMember]': ...
def _BNGetErrorForDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', ) -> 'ctypes.c_char_p': ...
def _BNGetExistingViews(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetExternalNameSpace() -> 'BNNameSpace': ...
def _BNGetFileExtension(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetFileForView(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNFileMetadata]': ...
def _BNGetFileMetadataDatabase(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.pointer[BNDatabase]': ...
def _BNGetFileName(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetFilePathsInDirectory(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetFileViewOfType(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNGetFilename(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_char_p': ...
def _BNGetFirstLinearViewObjectChild(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetFlagsReadByLiftedILInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetFlagsWrittenByLiftedILInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetFloatArgumentRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetFloatReturnValueRegister(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_uint32': ...
def _BNGetFlowGraphBasicBlock(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetFlowGraphHeight(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_int32': ...
def _BNGetFlowGraphHighLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetFlowGraphLowLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetFlowGraphMediumLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetFlowGraphNode(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'int', ) -> 'ctypes.pointer[BNFlowGraphNode]': ...
def _BNGetFlowGraphNodeHeight(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_int32': ...
def _BNGetFlowGraphNodeHighlight(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'BNHighlightColor': ...
def _BNGetFlowGraphNodeIncomingEdges(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNFlowGraphEdge]': ...
def _BNGetFlowGraphNodeLines(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNGetFlowGraphNodeOutgoingEdges(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNFlowGraphEdge]': ...
def _BNGetFlowGraphNodeOwner(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNGetFlowGraphNodeWidth(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_int32': ...
def _BNGetFlowGraphNodeX(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_int32': ...
def _BNGetFlowGraphNodeY(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_int32': ...
def _BNGetFlowGraphNodes(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNFlowGraphNode]]': ...
def _BNGetFlowGraphNodesInRegion(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNFlowGraphNode]]': ...
def _BNGetFlowGraphWidth(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_int32': ...
def _BNGetFormInput(arg0: 'ctypes.pointer[BNFormInputField]', arg1: 'int', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetFullWidthArchitectureRegisters(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetFunctionAddressRanges(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNAddressRange]': ...
def _BNGetFunctionAllTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetFunctionAnalysisPerformanceInfo(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPerformanceInfo]': ...
def _BNGetFunctionAnalysisSkipOverride(arg0: 'ctypes.pointer[BNFunction]', ) -> 'FunctionAnalysisSkipOverrideEnum': ...
def _BNGetFunctionArchitecture(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetFunctionBasicBlockAtAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetFunctionBasicBlockList(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetFunctionBlockAnnotations(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextLine]': ...
def _BNGetFunctionCallSites(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNReferenceSource]': ...
def _BNGetFunctionCallingConvention(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNCallingConventionWithConfidence': ...
def _BNGetFunctionClobberedRegisters(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNRegisterSetWithConfidence': ...
def _BNGetFunctionComment(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_char_p': ...
def _BNGetFunctionData(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNGetFunctionForFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetFunctionGlobalPointerValue(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNRegisterValueWithConfidence': ...
def _BNGetFunctionHighLevelIL(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetFunctionHighLevelILIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetFunctionHighestAddress(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetFunctionLanguageRepresentation(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLanguageRepresentationFunction]': ...
def _BNGetFunctionLanguageRepresentationIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLanguageRepresentationFunction]': ...
def _BNGetFunctionLiftedIL(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetFunctionLiftedILIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetFunctionLowLevelIL(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetFunctionLowLevelILIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetFunctionLowestAddress(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetFunctionMappedMediumLevelIL(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetFunctionMappedMediumLevelILIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetFunctionMediumLevelIL(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetFunctionMediumLevelILIfAvailable(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetFunctionParameterVariables(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNParameterVariablesWithConfidence': ...
def _BNGetFunctionPlatform(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetFunctionRegisterStackAdjustments(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRegisterStackAdjustment]': ...
def _BNGetFunctionRegisterValueAtExit(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'BNRegisterValueWithConfidence': ...
def _BNGetFunctionReturnRegisters(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNRegisterSetWithConfidence': ...
def _BNGetFunctionReturnType(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNTypeWithConfidence': ...
def _BNGetFunctionStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', ) -> 'BNOffsetWithConfidence': ...
def _BNGetFunctionStart(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetFunctionSymbol(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNGetFunctionTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetFunctionTagReferencesOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetFunctionTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetFunctionTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetFunctionType(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetFunctionTypeTokens(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNDisassemblySettings]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNGetFunctionVariableDeadStoreElimination(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'DeadStoreEliminationEnum': ...
def _BNGetFunctionVariables(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableNameAndType]': ...
def _BNGetGlobalCommentForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetGlobalCommentedAddresses(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetGlobalPointerRegister(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_uint32': ...
def _BNGetGlobalPointerValue(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'BNRegisterValueWithConfidence': ...
def _BNGetGotoLabelName(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetGraphForFlowGraphLayoutRequest(arg0: 'ctypes.pointer[BNFlowGraphLayoutRequest]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNGetHighIntegerReturnValueRegister(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_uint32': ...
def _BNGetHighLevelILAliasedVariables(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariable]': ...
def _BNGetHighLevelILBasicBlockForInstruction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetHighLevelILBasicBlockList(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetHighLevelILByIndex(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'bool', ) -> 'BNHighLevelILInstruction': ...
def _BNGetHighLevelILExprCount(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILExprIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILExprIndexForLabel(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILExprIndexes(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILExprText(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'bool', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNGetHighLevelILExprType(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'BNTypeWithConfidence': ...
def _BNGetHighLevelILForMediumLevelIL(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetHighLevelILIndexForInstruction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILInstructionCount(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILInstructionForExpr(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILInstructionIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILNonSSAExprIndex(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILNonSSAForm(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetHighLevelILNonSSAInstructionIndex(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILOwnerFunction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetHighLevelILRootExpr(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAExprIndex(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAForm(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNGetHighLevelILSSAInstructionIndex(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAMemoryDefinition(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAMemoryUses(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILSSAMemoryVersionAtILInstruction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAVarDefinition(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILSSAVarUses(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILSSAVarVersionAtILInstruction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetHighLevelILUsesForLabel(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILVariableDefinitions(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILVariableReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNILReferenceSource]': ...
def _BNGetHighLevelILVariableReferencesFrom(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetHighLevelILVariableReferencesFromIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetHighLevelILVariableReferencesIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNILReferenceSource]': ...
def _BNGetHighLevelILVariableReferencesInRange(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetHighLevelILVariableReferencesInRangeIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetHighLevelILVariableSSAVersions(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILVariableUses(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetHighLevelILVariables(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariable]': ...
def _BNGetHorizontalFlowGraphNodeMargin(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_int32': ...
def _BNGetImplicitlyDefinedRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetIncomingFlagValue(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'int', arg2: 'ctypes.pointer[BNFunction]', ) -> 'BNRegisterValue': ...
def _BNGetIncomingRegisterValue(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'int', arg2: 'ctypes.pointer[BNFunction]', ) -> 'BNRegisterValue': ...
def _BNGetIncomingVariableForParameterVariable(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNFunction]', ) -> 'BNVariable': ...
def _BNGetIndirectBranches(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNIndirectBranchInfo]': ...
def _BNGetIndirectBranchesAt(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNIndirectBranchInfo]': ...
def _BNGetInstallDirectory() -> 'ctypes.c_char_p': ...
def _BNGetInstructionContainingAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetInstructionHighlight(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'BNHighlightColor': ...
def _BNGetInstructionInfo(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[BNInstructionInfo]', ) -> 'ctypes.c_bool': ...
def _BNGetInstructionLength(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetInstructionLowLevelIL(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_bool': ...
def _BNGetInstructionText(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg5: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetIntegerArgumentRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetIntegerConstantDisplayType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'IntegerDisplayTypeEnum': ...
def _BNGetIntegerInput(arg0: 'ctypes.pointer[ctypes.c_int64]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetIntegerReturnValueRegister(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_uint32': ...
def _BNGetIntegerTypeDisplayType(arg0: 'ctypes.pointer[BNType]', ) -> 'IntegerDisplayTypeEnum': ...
def _BNGetInternalNameSpace() -> 'BNNameSpace': ...
def _BNGetKeyValueStoreBuffer(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetKeyValueStoreDataSize(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_uint64': ...
def _BNGetKeyValueStoreKeys(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetKeyValueStoreNamespaceSize(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_uint64': ...
def _BNGetKeyValueStoreSerializedData(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetKeyValueStoreValue(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetKeyValueStoreValueSize(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_uint64': ...
def _BNGetKeyValueStoreValueStorageSize(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_uint64': ...
def _BNGetLabelForLowLevelILSourceInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.pointer[BNLowLevelILLabel]': ...
def _BNGetLabelForMediumLevelILSourceInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.pointer[BNMediumLevelILLabel]': ...
def _BNGetLanguageRepresentationOwnerFunction(arg0: 'ctypes.pointer[BNLanguageRepresentationFunction]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetLastLinearViewObjectChild(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetLicenseCount() -> 'ctypes.c_int32': ...
def _BNGetLicenseExpirationTime() -> 'ctypes.c_uint64': ...
def _BNGetLicensedUserEmail() -> 'ctypes.c_char_p': ...
def _BNGetLiftedILFlagDefinitionsForUse(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLiftedILFlagUsesForDefinition(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLiftedILForInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLiftedILInstructionsForAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLinearViewCursorCurrentObject(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetLinearViewCursorLines(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNLinearDisassemblyLine]': ...
def _BNGetLinearViewCursorOrderingIndex(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'BNAddressRange': ...
def _BNGetLinearViewCursorOrderingIndexTotal(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_uint64': ...
def _BNGetLinearViewCursorPath(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNLinearViewObjectIdentifier]': ...
def _BNGetLinearViewCursorPathObjects(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNLinearViewObject]]': ...
def _BNGetLinearViewObjectChildForAddress(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'int', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetLinearViewObjectChildForIdentifier(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObjectIdentifier]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetLinearViewObjectChildForOrderingIndex(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'int', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetLinearViewObjectEnd(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.c_uint64': ...
def _BNGetLinearViewObjectIdentifier(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'BNLinearViewObjectIdentifier': ...
def _BNGetLinearViewObjectLines(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObject]', arg2: 'ctypes.pointer[BNLinearViewObject]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNLinearDisassemblyLine]': ...
def _BNGetLinearViewObjectOrderingIndexForChild(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.c_uint64': ...
def _BNGetLinearViewObjectOrderingIndexTotal(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.c_uint64': ...
def _BNGetLinearViewObjectStart(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.c_uint64': ...
def _BNGetLinesForData(arg0: 'Optional[ctypes.c_void_p]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'int', arg3: 'ctypes.pointer[BNType]', arg4: 'ctypes.pointer[BNInstructionTextToken]', arg5: 'int', arg6: 'int', arg7: 'ctypes.pointer[ctypes.c_uint64]', arg8: 'ctypes.pointer[BNTypeContext]', arg9: 'int', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNGetLowLevelFlagSSAVersions(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelFlags(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetLowLevelILBasicBlockForInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetLowLevelILBasicBlockList(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetLowLevelILByIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'BNLowLevelILInstruction': ...
def _BNGetLowLevelILExitsForInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILExprCount(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILExprIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILExprIndexes(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILExprText(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetLowLevelILExprValue(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILFlagValueAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILFlagValueAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILForInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILForMediumLevelIL(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetLowLevelILIndexForInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILInstructionCount(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILInstructionForExpr(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILInstructionIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILInstructionText(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNFunction]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'int', arg4: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg5: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetLowLevelILInstructionsForAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILLabelForAddress(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.pointer[BNLowLevelILLabel]': ...
def _BNGetLowLevelILNonSSAExprIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILNonSSAForm(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetLowLevelILNonSSAInstructionIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILOwnerFunction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetLowLevelILPossibleExprValues(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg3: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleFlagValuesAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleFlagValuesAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleRegisterValuesAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleRegisterValuesAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleStackContentsAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg5: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILPossibleStackContentsAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg5: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetLowLevelILRegisterValueAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILRegisterValueAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILSSAExprIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILSSAFlagDefinition(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILSSAFlagUses(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILSSAFlagValue(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILSSAForm(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNGetLowLevelILSSAInstructionIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILSSAMemoryDefinition(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILSSAMemoryUses(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILSSARegisterDefinition(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetLowLevelILSSARegisterUses(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelILSSARegisterValue(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILStackContentsAfterInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILStackContentsAtInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetLowLevelILTemporaryFlagCount(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint32': ...
def _BNGetLowLevelILTemporaryRegisterCount(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint32': ...
def _BNGetLowLevelMemoryVersions(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelRegisterSSAVersions(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelRegisterStackSSAVersions(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetLowLevelRegisterStacks(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetLowLevelRegisters(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetMappedMediumLevelIL(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetMappedMediumLevelILExprIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMappedMediumLevelILInstructionIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMaxFunctionSizeForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILAliasedVariables(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariable]': ...
def _BNGetMediumLevelILBasicBlockForInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetMediumLevelILBasicBlockList(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]': ...
def _BNGetMediumLevelILBranchDependence(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'ILBranchDependenceEnum': ...
def _BNGetMediumLevelILByIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'BNMediumLevelILInstruction': ...
def _BNGetMediumLevelILExprCount(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILExprIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILExprIndexFromHighLevelIL(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILExprIndexes(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILExprIndexesFromHighLevelIL(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILExprText(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.c_bool': ...
def _BNGetMediumLevelILExprType(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'BNTypeWithConfidence': ...
def _BNGetMediumLevelILExprValue(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILFlagValueAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILFlagValueAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILForHighLevelILFunction(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetMediumLevelILForLowLevelIL(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetMediumLevelILIndexForInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILInstructionCount(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILInstructionForExpr(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILInstructionIndex(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILInstructionText(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNFunction]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'int', arg4: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg5: 'ctypes.pointer[ctypes.c_uint64]', arg6: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.c_bool': ...
def _BNGetMediumLevelILNonSSAExprIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILNonSSAForm(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetMediumLevelILNonSSAInstructionIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILOwnerFunction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetMediumLevelILPossibleExprValues(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg3: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleFlagValuesAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleFlagValuesAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleRegisterValuesAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleRegisterValuesAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg4: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleSSAVarValues(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg5: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleStackContentsAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg5: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILPossibleStackContentsAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[DataFlowQueryOptionEnum]', arg5: 'int', ) -> 'BNPossibleValueSet': ...
def _BNGetMediumLevelILRegisterValueAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILRegisterValueAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILSSAExprIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILSSAForm(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNGetMediumLevelILSSAInstructionIndex(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILSSAMemoryDefinition(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILSSAMemoryUses(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILSSAMemoryVersionAtILInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILSSAVarDefinition(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILSSAVarUses(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILSSAVarValue(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILSSAVarVersionAtILInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetMediumLevelILStackContentsAfterInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILStackContentsAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetMediumLevelILVariableDefinitions(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILVariableForFlagAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNVariable': ...
def _BNGetMediumLevelILVariableForRegisterAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNVariable': ...
def _BNGetMediumLevelILVariableForStackLocationAtInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'BNVariable': ...
def _BNGetMediumLevelILVariableReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNILReferenceSource]': ...
def _BNGetMediumLevelILVariableReferencesFrom(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetMediumLevelILVariableReferencesFromIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetMediumLevelILVariableReferencesIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNILReferenceSource]': ...
def _BNGetMediumLevelILVariableReferencesInRange(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetMediumLevelILVariableReferencesInRangeIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableReferenceSource]': ...
def _BNGetMediumLevelILVariableSSAVersions(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILVariableUses(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetMediumLevelILVariables(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariable]': ...
def _BNGetMemoryUsageInfo(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNMemoryUsageInfo]': ...
def _BNGetMinimumCoreABIVersion() -> 'ctypes.c_uint32': ...
def _BNGetModification(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ModificationStatusEnum': ...
def _BNGetModificationArray(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ModificationStatusEnum]', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetModifiedArchitectureRegistersOnWrite(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetNameSpaces(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNNameSpace]': ...
def _BNGetNativeTypeParserArchitecture() -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetNewAutoFunctionAnalysisSuppressed(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNGetNextBasicBlockStartAfterAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetNextDataAfterAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetNextDataVariableStartAfterAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetNextFunctionStartAfterAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetNextLinearViewObjectChild(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetNextValidOffset(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetOpenFileNameInput(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetOriginalFilename(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_char_p': ...
def _BNGetParameterValueAtInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNType]', arg4: 'int', ) -> 'BNRegisterValue': ...
def _BNGetParameterValueAtLowLevelILInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNType]', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetParameterVariableForIncomingVariable(arg0: 'ctypes.pointer[BNCallingConvention]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNFunction]', ) -> 'BNVariable': ...
def _BNGetParametersForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'BNAnalysisParameters': ...
def _BNGetParentPath(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetParentView(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNGetPathRelativeToBundledPluginDirectory(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetPathRelativeToUserDirectory(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetPathRelativeToUserPluginDirectory(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetPlatformArchitecture(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetPlatformByName(arg0: 'str', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetPlatformCallingConventions(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNCallingConvention]]': ...
def _BNGetPlatformCdeclCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetPlatformDefaultCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetPlatformFastcallCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetPlatformForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetPlatformFunctionByName(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'bool', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetPlatformFunctions(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetPlatformList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNPlatform]]': ...
def _BNGetPlatformListByArchitecture(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNPlatform]]': ...
def _BNGetPlatformListByOS(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNPlatform]]': ...
def _BNGetPlatformListByOSAndArchitecture(arg0: 'str', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNPlatform]]': ...
def _BNGetPlatformName(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.c_char_p': ...
def _BNGetPlatformOSList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetPlatformStdcallCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetPlatformSystemCallConvention(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNGetPlatformSystemCallName(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetPlatformSystemCallType(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'int', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetPlatformSystemCalls(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNSystemCallInfo]': ...
def _BNGetPlatformTypeByName(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetPlatformTypeLibraries(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypeLibrary]]': ...
def _BNGetPlatformTypeLibrariesByName(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypeLibrary]]': ...
def _BNGetPlatformTypes(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetPlatformVariableByName(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetPlatformVariables(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetPreviousBasicBlockEndBeforeAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetPreviousBasicBlockStartBeforeAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetPreviousDataBeforeAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetPreviousDataVariableStartBeforeAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetPreviousFunctionStartBeforeAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNGetPreviousLinearViewObjectChild(arg0: 'ctypes.pointer[BNLinearViewObject]', arg1: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNGetProduct() -> 'ctypes.c_char_p': ...
def _BNGetProductType() -> 'ctypes.c_char_p': ...
def _BNGetReaderPosition(arg0: 'ctypes.pointer[BNBinaryReader]', ) -> 'ctypes.c_uint64': ...
def _BNGetRealVariableName(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNVariable]', ) -> 'ctypes.c_char_p': ...
def _BNGetRecentAnalysisFunctionForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNGetRecentBasicBlockForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNGetRegisterValueAfterInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetRegisterValueAtInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'BNRegisterValue': ...
def _BNGetRegisteredTypeName(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNGetRegistersReadByInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetRegistersWrittenByInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint32]': ...
def _BNGetRelatedPlatform(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNArchitecture]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNGetRelocationRanges(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRange]': ...
def _BNGetRelocationRangesAtAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRange]': ...
def _BNGetReportCollectionCount(arg0: 'ctypes.pointer[BNReportCollection]', ) -> 'ctypes.c_uint64': ...
def _BNGetReportContents(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetReportFlowGraph(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNGetReportPlainText(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetReportTitle(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ctypes.c_char_p': ...
def _BNGetReportType(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ReportTypeEnum': ...
def _BNGetReportView(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNGetRepositoriesDirectory() -> 'ctypes.c_char_p': ...
def _BNGetRepositoryManager() -> 'ctypes.pointer[BNRepositoryManager]': ...
def _BNGetRunningBackgroundTasks(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNBackgroundTask]]': ...
def _BNGetSaveFileNameInput(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'str', arg2: 'str', arg3: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetScriptingInstanceDelimiters(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'ctypes.c_char_p': ...
def _BNGetScriptingInstanceInputReadyState(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'ScriptingProviderInputReadyStateEnum': ...
def _BNGetScriptingProviderAPIName(arg0: 'ctypes.pointer[BNScriptingProvider]', ) -> 'ctypes.c_char_p': ...
def _BNGetScriptingProviderByAPIName(arg0: 'str', ) -> 'ctypes.pointer[BNScriptingProvider]': ...
def _BNGetScriptingProviderByName(arg0: 'str', ) -> 'ctypes.pointer[BNScriptingProvider]': ...
def _BNGetScriptingProviderList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNScriptingProvider]]': ...
def _BNGetScriptingProviderName(arg0: 'ctypes.pointer[BNScriptingProvider]', ) -> 'ctypes.c_char_p': ...
def _BNGetSecretsProviderByName(arg0: 'str', ) -> 'ctypes.pointer[BNSecretsProvider]': ...
def _BNGetSecretsProviderData(arg0: 'ctypes.pointer[BNSecretsProvider]', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNGetSecretsProviderList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSecretsProvider]]': ...
def _BNGetSecretsProviderName(arg0: 'ctypes.pointer[BNSecretsProvider]', ) -> 'ctypes.c_char_p': ...
def _BNGetSectionByName(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNSection]': ...
def _BNGetSections(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSection]]': ...
def _BNGetSectionsAt(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSection]]': ...
def _BNGetSegmentAt(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.pointer[BNSegment]': ...
def _BNGetSegments(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSegment]]': ...
def _BNGetSerialNumber() -> 'ctypes.c_char_p': ...
def _BNGetSettingsFileName() -> 'ctypes.c_char_p': ...
def _BNGetSizesReferenced(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetSnapshotChildren(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSnapshot]]': ...
def _BNGetSnapshotData(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[BNKeyValueStore]', arg2: 'ctypes.pointer[BNKeyValueStore]', arg3: 'Optional[ctypes.c_void_p]', arg4: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'None': ...
def _BNGetSnapshotDatabase(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNDatabase]': ...
def _BNGetSnapshotFileContents(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetSnapshotFileContentsHash(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetSnapshotFirstParent(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNSnapshot]': ...
def _BNGetSnapshotId(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_int64': ...
def _BNGetSnapshotName(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_char_p': ...
def _BNGetSnapshotParents(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNSnapshot]]': ...
def _BNGetSnapshotUndoEntries(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNUndoEntry]': ...
def _BNGetSnapshotUndoEntriesWithProgress(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNUndoEntry]': ...
def _BNGetStackContentsAfterInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'BNRegisterValue': ...
def _BNGetStackContentsAtInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'BNRegisterValue': ...
def _BNGetStackLayout(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNVariableNameAndType]': ...
def _BNGetStackVariableAtFrameOffset(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[BNVariableNameAndType]', ) -> 'ctypes.c_bool': ...
def _BNGetStackVariablesReferencedByInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStackVariableReference]': ...
def _BNGetStackVariablesReferencedByInstructionIfAvailable(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStackVariableReference]': ...
def _BNGetStartOffset(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetStringAtAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNStringReference]', ) -> 'ctypes.c_bool': ...
def _BNGetStrings(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStringReference]': ...
def _BNGetStringsInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStringReference]': ...
def _BNGetStructureAlignment(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.c_uint64': ...
def _BNGetStructureBuilderAlignment(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetStructureBuilderMemberAtOffset(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureBuilderMemberByName(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'str', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureBuilderMembers(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureBuilderType(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'StructureVariantEnum': ...
def _BNGetStructureBuilderWidth(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetStructureMemberAtOffset(arg0: 'ctypes.pointer[BNStructure]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureMemberByName(arg0: 'ctypes.pointer[BNStructure]', arg1: 'str', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureMembers(arg0: 'ctypes.pointer[BNStructure]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNStructureMember]': ...
def _BNGetStructureType(arg0: 'ctypes.pointer[BNStructure]', ) -> 'StructureVariantEnum': ...
def _BNGetStructureWidth(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.c_uint64': ...
def _BNGetSymbolAddress(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_uint64': ...
def _BNGetSymbolBinding(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'SymbolBindingEnum': ...
def _BNGetSymbolByAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNGetSymbolByRawName(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNGetSymbolFullName(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_char_p': ...
def _BNGetSymbolNameSpace(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'BNNameSpace': ...
def _BNGetSymbolOrdinal(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_uint64': ...
def _BNGetSymbolRawBytes(arg0: 'ctypes.pointer[BNSymbol]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'Optional[ctypes.c_void_p]': ...
def _BNGetSymbolRawName(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_char_p': ...
def _BNGetSymbolShortName(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_char_p': ...
def _BNGetSymbolType(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'SymbolTypeEnum': ...
def _BNGetSymbols(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetSymbolsByName(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetSymbolsByRawName(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetSymbolsInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', arg4: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetSymbolsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'SymbolTypeEnum', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetSymbolsOfTypeInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'SymbolTypeEnum', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', arg5: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNTag]': ...
def _BNGetTagReferencesOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetTagReferencesOfTypeCount(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_uint64': ...
def _BNGetTagType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNGetTagTypeById(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNGetTagTypeByIdWithType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'TagTypeTypeEnum', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNGetTagTypeWithType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'TagTypeTypeEnum', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNGetTagTypes(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTagType]]': ...
def _BNGetTemporaryFileContents(arg0: 'ctypes.pointer[BNTemporaryFile]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNGetTemporaryFilePath(arg0: 'ctypes.pointer[BNTemporaryFile]', ) -> 'ctypes.c_char_p': ...
def _BNGetTextLineInput(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNGetTimeSinceLastUpdateCheck() -> 'ctypes.c_uint64': ...
def _BNGetTransformByName(arg0: 'str', ) -> 'ctypes.pointer[BNTransform]': ...
def _BNGetTransformGroup(arg0: 'ctypes.pointer[BNTransform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTransformLongName(arg0: 'ctypes.pointer[BNTransform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTransformName(arg0: 'ctypes.pointer[BNTransform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTransformParameterList(arg0: 'ctypes.pointer[BNTransform]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTransformParameterInfo]': ...
def _BNGetTransformType(arg0: 'ctypes.pointer[BNTransform]', ) -> 'TransformTypeEnum': ...
def _BNGetTransformTypeList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTransform]]': ...
def _BNGetTypeAlignment(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeAlternateName(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeAndName(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderAlignment(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeBuilderAlternateName(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderCallingConvention(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNCallingConventionWithConfidence': ...
def _BNGetTypeBuilderChildType(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNTypeWithConfidence': ...
def _BNGetTypeBuilderClass(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'TypeClassEnum': ...
def _BNGetTypeBuilderElementCount(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeBuilderEnumeration(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.pointer[BNEnumeration]': ...
def _BNGetTypeBuilderNamedTypeReference(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNGetTypeBuilderOffset(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeBuilderParameters(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNFunctionParameter]': ...
def _BNGetTypeBuilderStackAdjustment(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNOffsetWithConfidence': ...
def _BNGetTypeBuilderString(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderStringAfterName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderStringBeforeName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderStructure(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNGetTypeBuilderTokens(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeBuilderTokensAfterName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeBuilderTokensBeforeName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeBuilderTypeAndName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeBuilderWidth(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeCallingConvention(arg0: 'ctypes.pointer[BNType]', ) -> 'BNCallingConventionWithConfidence': ...
def _BNGetTypeClass(arg0: 'ctypes.pointer[BNType]', ) -> 'TypeClassEnum': ...
def _BNGetTypeElementCount(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeEnumeration(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNEnumeration]': ...
def _BNGetTypeLibraryAlternateNames(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetTypeLibraryArchitecture(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNGetTypeLibraryDependencyName(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeLibraryGuid(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeLibraryName(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeLibraryNamedObject(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetTypeLibraryNamedObjects(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetTypeLibraryNamedType(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.pointer[BNType]': ...
def _BNGetTypeLibraryNamedTypes(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNQualifiedNameAndType]': ...
def _BNGetTypeLibraryPlatforms(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetTypeLines(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'str', arg3: 'int', arg4: 'bool', arg5: 'TokenEscapingTypeEnum', arg6: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeDefinitionLine]': ...
def _BNGetTypeNamedTypeReference(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNGetTypeOffset(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypeParameters(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNFunctionParameter]': ...
def _BNGetTypeParserByName(arg0: 'str', ) -> 'ctypes.pointer[BNTypeParser]': ...
def _BNGetTypeParserList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypeParser]]': ...
def _BNGetTypeParserName(arg0: 'ctypes.pointer[BNTypeParser]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypePrinterByName(arg0: 'str', ) -> 'ctypes.pointer[BNTypePrinter]': ...
def _BNGetTypePrinterList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTypePrinter]]': ...
def _BNGetTypePrinterName(arg0: 'ctypes.pointer[BNTypePrinter]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypePrinterTypeLines(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[BNQualifiedName]', arg4: 'int', arg5: 'bool', arg6: 'TokenEscapingTypeEnum', arg7: 'ctypes.pointer[ctypes.pointer[BNTypeDefinitionLine]]', arg8: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeString(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'ctypes.pointer[BNQualifiedName]', arg4: 'TokenEscapingTypeEnum', arg5: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeStringAfterName(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'TokenEscapingTypeEnum', arg4: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeStringBeforeName(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'TokenEscapingTypeEnum', arg4: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeTokens(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'ctypes.pointer[BNQualifiedName]', arg4: 'int', arg5: 'TokenEscapingTypeEnum', arg6: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg7: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeTokensAfterName(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'int', arg4: 'ctypes.pointer[BNType]', arg5: 'TokenEscapingTypeEnum', arg6: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg7: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetTypePrinterTypeTokensBeforeName(arg0: 'ctypes.pointer[BNTypePrinter]', arg1: 'ctypes.pointer[BNType]', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'int', arg4: 'ctypes.pointer[BNType]', arg5: 'TokenEscapingTypeEnum', arg6: 'ctypes.pointer[ctypes.pointer[BNInstructionTextToken]]', arg7: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNGetTypeReferenceBuilderClass(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', ) -> 'NamedTypeReferenceClassEnum': ...
def _BNGetTypeReferenceBuilderId(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeReferenceBuilderName(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', ) -> 'BNQualifiedName': ...
def _BNGetTypeReferenceClass(arg0: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'NamedTypeReferenceClassEnum': ...
def _BNGetTypeReferenceId(arg0: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeReferenceName(arg0: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'BNQualifiedName': ...
def _BNGetTypeReferencesForType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetTypeReferencesForTypeField(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeReferenceSource]': ...
def _BNGetTypeStackAdjustment(arg0: 'ctypes.pointer[BNType]', ) -> 'BNOffsetWithConfidence': ...
def _BNGetTypeString(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeStringAfterName(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeStringBeforeName(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNGetTypeStructure(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNGetTypeTokens(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'TokenEscapingTypeEnum', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeTokensAfterName(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'TokenEscapingTypeEnum', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeTokensBeforeName(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNPlatform]', arg2: 'int', arg3: 'TokenEscapingTypeEnum', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNInstructionTextToken]': ...
def _BNGetTypeWidth(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_uint64': ...
def _BNGetTypesReferenced(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTypeWithConfidence]': ...
def _BNGetUndoEntries(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNUndoEntry]': ...
def _BNGetUniqueIdentifierString() -> 'ctypes.c_char_p': ...
def _BNGetUniqueSectionNames(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_char_p]', arg2: 'int', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNGetUnresolvedIndirectBranches(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNGetUnresolvedStackAdjustmentGraph(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNGetUpdateChannelVersions(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.pointer[BNUpdateVersion]': ...
def _BNGetUpdateChannels(arg0: 'ctypes.pointer[ctypes.c_uint64]', arg1: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.pointer[BNUpdateChannel]': ...
def _BNGetUserAddressTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetUserAddressTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserAddressTagsInRange(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetUserAddressTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTagType]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserDataTagReferences(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetUserDataTags(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserDataTagsInRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetUserDataTagsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTagType]', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserDirectory() -> 'ctypes.c_char_p': ...
def _BNGetUserEmail(arg0: 'ctypes.pointer[BNUser]', ) -> 'ctypes.c_char_p': ...
def _BNGetUserFunctionTagReferences(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNTagReference]': ...
def _BNGetUserFunctionTags(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserFunctionTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNTag]]': ...
def _BNGetUserId(arg0: 'ctypes.pointer[BNUser]', ) -> 'ctypes.c_char_p': ...
def _BNGetUserName(arg0: 'ctypes.pointer[BNUser]', ) -> 'ctypes.c_char_p': ...
def _BNGetUserPluginDirectory() -> 'ctypes.c_char_p': ...
def _BNGetUsers(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNUser]]': ...
def _BNGetValidPluginCommands(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNFunction]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForHighLevelILFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNHighLevelILFunction]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForHighLevelILInstruction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNHighLevelILFunction]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForLowLevelILFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForLowLevelILInstruction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForMediumLevelILFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNMediumLevelILFunction]', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForMediumLevelILInstruction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNMediumLevelILFunction]', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetValidPluginCommandsForRange(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNPluginCommand]': ...
def _BNGetVariableName(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'ctypes.c_char_p': ...
def _BNGetVariableType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'BNTypeWithConfidence': ...
def _BNGetVersionString() -> 'ctypes.c_char_p': ...
def _BNGetVerticalFlowGraphNodeMargin(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_int32': ...
def _BNGetViewAddressSize(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetViewForFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNGetViewLength(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_uint64': ...
def _BNGetViewType(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_char_p': ...
def _BNGetVisibleSymbols(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[BNNameSpace]', ) -> 'ctypes.pointer[ctypes.pointer[BNSymbol]]': ...
def _BNGetWebsocketProviderByName(arg0: 'str', ) -> 'ctypes.pointer[BNWebsocketProvider]': ...
def _BNGetWebsocketProviderList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNWebsocketProvider]]': ...
def _BNGetWebsocketProviderName(arg0: 'ctypes.pointer[BNWebsocketProvider]', ) -> 'ctypes.c_char_p': ...
def _BNGetWorkerThreadCount() -> 'ctypes.c_uint64': ...
def _BNGetWorkflowForBinaryView(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNGetWorkflowForFunction(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNGetWorkflowList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNWorkflow]]': ...
def _BNGetWorkflowName(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'ctypes.c_char_p': ...
def _BNGetWriterPosition(arg0: 'ctypes.pointer[BNBinaryWriter]', ) -> 'ctypes.c_uint64': ...
def _BNHasDataVariables(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNHasFunctions(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNHasInitialAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNHasSymbols(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNHasUnresolvedIndirectBranches(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNHighLevelILAddExpr(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'HighLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', ) -> 'ctypes.c_uint64': ...
def _BNHighLevelILAddExprWithLocation(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'HighLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', arg8: 'int', arg9: 'int', ) -> 'ctypes.c_uint64': ...
def _BNHighLevelILAddOperandList(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNHighLevelILExprEqual(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNHighLevelILFunction]', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNHighLevelILExprLessThan(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNHighLevelILFunction]', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNHighLevelILFreeOperandList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNHighLevelILGetCurrentAddress(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNHighLevelILGetOperandList(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNHighLevelILSetCurrentAddress(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'None': ...
def _BNImportedFunctionFromImportAddressSymbol(arg0: 'ctypes.pointer[BNSymbol]', arg1: 'int', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNInitCorePlugins() -> 'ctypes.c_bool': ...
def _BNInitDownloadInstance(arg0: 'ctypes.pointer[BNDownloadProvider]', arg1: 'ctypes.pointer[BNDownloadInstanceCallbacks]', ) -> 'ctypes.pointer[BNDownloadInstance]': ...
def _BNInitPlugins(arg0: 'bool', ) -> 'ctypes.c_bool': ...
def _BNInitRepoPlugins() -> 'None': ...
def _BNInitScriptingInstance(arg0: 'ctypes.pointer[BNScriptingProvider]', arg1: 'ctypes.pointer[BNScriptingInstanceCallbacks]', ) -> 'ctypes.pointer[BNScriptingInstance]': ...
def _BNInitUserPlugins() -> 'None': ...
def _BNInitWebsocketClient(arg0: 'ctypes.pointer[BNWebsocketProvider]', arg1: 'ctypes.pointer[BNWebsocketClientCallbacks]', ) -> 'ctypes.pointer[BNWebsocketClient]': ...
def _BNInsertViewBuffer(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_uint64': ...
def _BNInsertViewData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'Optional[ctypes.c_void_p]', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNInstallPendingUpdate(arg0: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'None': ...
def _BNInstallScriptingProviderModules(arg0: 'ctypes.pointer[BNScriptingProvider]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNInvertBranch(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsAlwaysBranchPatchAvailable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsAnalysisChanged(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNIsAnalysisTypeAutoDefined(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureAlwaysBranchPatchAvailable(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureGlobalRegister(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureInvertBranchPatchAvailable(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureNeverBranchPatchAvailable(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureSkipAndReturnValuePatchAvailable(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureSkipAndReturnZeroPatchAvailable(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsArchitectureSystemRegister(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsBackedByDatabase(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNIsBackgroundTaskCancelled(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'ctypes.c_bool': ...
def _BNIsBackgroundTaskFinished(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'ctypes.c_bool': ...
def _BNIsBinaryViewTypeArchitectureConstantDefined(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNIsBinaryViewTypeDeprecated(arg0: 'ctypes.pointer[BNBinaryViewType]', ) -> 'ctypes.c_bool': ...
def _BNIsBinaryViewTypeValidForData(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNIsCallInstruction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsDebugInfoParserValidForView(arg0: 'ctypes.pointer[BNDebugInfoParser]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNIsDisassemblySettingsOptionSet(arg0: 'ctypes.pointer[BNDisassemblySettings]', arg1: 'DisassemblyOptionEnum', ) -> 'ctypes.c_bool': ...
def _BNIsEligibleForHeuristics(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_bool': ...
def _BNIsEndOfFile(arg0: 'ctypes.pointer[BNBinaryReader]', ) -> 'ctypes.c_bool': ...
def _BNIsEnterpriseServerAuthenticated() -> 'ctypes.c_bool': ...
def _BNIsEnterpriseServerConnected() -> 'ctypes.c_bool': ...
def _BNIsEnterpriseServerInitialized() -> 'ctypes.c_bool': ...
def _BNIsEnterpriseServerLicenseStillActivated() -> 'ctypes.c_bool': ...
def _BNIsExecutableView(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNIsFileModified(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNIsFlowGraphLayoutComplete(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNIsFlowGraphLayoutRequestComplete(arg0: 'ctypes.pointer[BNFlowGraphLayoutRequest]', ) -> 'ctypes.c_bool': ...
def _BNIsFlowGraphOptionSet(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'FlowGraphOptionEnum', ) -> 'ctypes.c_bool': ...
def _BNIsFunctionAnalysisSkipped(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNIsFunctionTooLarge(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNIsFunctionUpdateNeeded(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNIsGNU3MangledString(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNIsHighLevelILBasicBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNIsHighLevelILFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNIsHighLevelILSSAVarLive(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsHighLevelILSSAVarLiveAt(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsHighLevelILVarLiveAt(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsILBasicBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNIsILDisassemblyTextRenderer(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.c_bool': ...
def _BNIsILFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNIsIntegerToken(arg0: 'InstructionTextTokenTypeEnum', ) -> 'ctypes.c_bool': ...
def _BNIsInvertBranchPatchAvailable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsKeyValueStoreEmpty(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_bool': ...
def _BNIsLicenseValidated() -> 'ctypes.c_bool': ...
def _BNIsLinearViewCursorAfterEnd(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_bool': ...
def _BNIsLinearViewCursorBeforeBegin(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_bool': ...
def _BNIsLowLevelILBasicBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNIsLowLevelILFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNIsMainThread() -> 'ctypes.c_bool': ...
def _BNIsMainThreadActionDone(arg0: 'ctypes.pointer[BNMainThreadAction]', ) -> 'ctypes.c_bool': ...
def _BNIsMediumLevelILBasicBlock(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.c_bool': ...
def _BNIsMediumLevelILFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.c_bool': ...
def _BNIsMediumLevelILSSAVarLive(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsNeverBranchPatchAvailable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsNodeValidForFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetBackedByFile(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetCodeSemantics(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetExecutable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetExternSemantics(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetReadable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetWritable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsOffsetWritableSemantics(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsPathDirectory(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNIsPathRegularFile(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNIsPluginsEnabled() -> 'ctypes.c_bool': ...
def _BNIsProjectOpen(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNIsRelocatable(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNIsSaveSettingsOptionSet(arg0: 'ctypes.pointer[BNSaveSettings]', arg1: 'SaveOptionEnum', ) -> 'ctypes.c_bool': ...
def _BNIsShutdownRequested() -> 'ctypes.c_bool': ...
def _BNIsSkipAndReturnValuePatchAvailable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsSkipAndReturnZeroPatchAvailable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsSnapshotAutoSave(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_bool': ...
def _BNIsSnapshotDataAppliedWithoutError(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNIsStackAdjustedOnReturn(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_bool': ...
def _BNIsStackReservedForArgumentRegisters(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.c_bool': ...
def _BNIsStructureBuilderPacked(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.c_bool': ...
def _BNIsStructureBuilderUnion(arg0: 'ctypes.pointer[BNStructureBuilder]', ) -> 'ctypes.c_bool': ...
def _BNIsStructurePacked(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.c_bool': ...
def _BNIsStructureUnion(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.c_bool': ...
def _BNIsSymbolAutoDefined(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.c_bool': ...
def _BNIsTypeBuilderConst(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNBoolWithConfidence': ...
def _BNIsTypeBuilderFloatingPoint(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_bool': ...
def _BNIsTypeBuilderSigned(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNBoolWithConfidence': ...
def _BNIsTypeBuilderVolatile(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNBoolWithConfidence': ...
def _BNIsTypeConst(arg0: 'ctypes.pointer[BNType]', ) -> 'BNBoolWithConfidence': ...
def _BNIsTypeFloatingPoint(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_bool': ...
def _BNIsTypeSigned(arg0: 'ctypes.pointer[BNType]', ) -> 'BNBoolWithConfidence': ...
def _BNIsTypeVolatile(arg0: 'ctypes.pointer[BNType]', ) -> 'BNBoolWithConfidence': ...
def _BNIsUIEnabled() -> 'ctypes.c_bool': ...
def _BNIsUpdateInstallationPending() -> 'ctypes.c_bool': ...
def _BNIsValidForData(arg0: 'Optional[ctypes.c_void_p]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'int', arg3: 'ctypes.pointer[BNType]', arg4: 'ctypes.pointer[BNTypeContext]', arg5: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsValidOffset(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNIsVariableUserDefined(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', ) -> 'ctypes.c_bool': ...
def _BNIsViewModified(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.c_bool': ...
def _BNKeyValueStoreHasValue(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNLinearViewCursorNext(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_bool': ...
def _BNLinearViewCursorPrevious(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_bool': ...
def _BNLlvmServicesAssemble(arg0: 'str', arg1: 'int', arg2: 'str', arg3: 'int', arg4: 'int', arg5: 'ctypes.pointer[ctypes.c_char_p]', arg6: 'ctypes.pointer[ctypes.c_int32]', arg7: 'ctypes.pointer[ctypes.c_char_p]', arg8: 'ctypes.pointer[ctypes.c_int32]', ) -> 'ctypes.c_int32': ...
def _BNLlvmServicesAssembleFree(arg0: 'str', arg1: 'str', ) -> 'None': ...
def _BNLlvmServicesInit() -> 'None': ...
def _BNLoadScriptingProviderModule(arg0: 'ctypes.pointer[BNScriptingProvider]', arg1: 'str', arg2: 'str', arg3: 'bool', ) -> 'ctypes.c_bool': ...
def _BNLoadTypeLibraryFromFile(arg0: 'str', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNLog(level, *args) -> 'None': ...
def _BNLogAlert(*args) -> 'None': ...
def _BNLogCreateLogger(arg0: 'str', arg1: 'int', ) -> 'ctypes.pointer[BNLogger]': ...
def _BNLogDebug(*args) -> 'None': ...
def _BNLogError(*args) -> 'None': ...
def _BNLogGetLogger(arg0: 'str', arg1: 'int', ) -> 'ctypes.pointer[BNLogger]': ...
def _BNLogGetLoggerNames(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNLogInfo(*args) -> 'None': ...
def _BNLogRegisterLoggerCallback(arg0: 'Callable[[str, Optional[ctypes.c_void_p], ], None]', arg1: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNLogString(arg0: 'int', arg1: 'LogLevelEnum', arg2: 'str', arg3: 'int', arg4: 'str', ) -> 'None': ...
def _BNLogToFile(arg0: 'LogLevelEnum', arg1: 'str', arg2: 'bool', ) -> 'ctypes.c_bool': ...
def _BNLogToStderr(arg0: 'LogLevelEnum', ) -> 'None': ...
def _BNLogToStdout(arg0: 'LogLevelEnum', ) -> 'None': ...
def _BNLogWarn(*args) -> 'None': ...
def _BNLoggerGetName(arg0: 'ctypes.pointer[BNLogger]', ) -> 'ctypes.c_char_p': ...
def _BNLoggerGetSessionId(arg0: 'ctypes.pointer[BNLogger]', ) -> 'ctypes.c_uint64': ...
def _BNLoggerLog(*args) -> 'None': ...
def _BNLoggerLogString(arg0: 'ctypes.pointer[BNLogger]', arg1: 'LogLevelEnum', arg2: 'str', ) -> 'None': ...
def _BNLookupTypeLibraryByGuid(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNLookupTypeLibraryByName(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNLowLevelILAddExpr(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'LowLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILAddExprWithLocation(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'LowLevelILOperationEnum', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', arg8: 'int', arg9: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILAddInstruction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILAddLabelMap(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[ctypes.pointer[BNLowLevelILLabel]]', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILAddOperandList(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILClearIndirectBranches(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNLowLevelILFreeOperandList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNLowLevelILGetCurrentAddress(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILGetInstructionStart(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILGetOperandList(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNLowLevelILGoto(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNLowLevelILLabel]', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILGotoWithLocation(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNLowLevelILLabel]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILIf(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNLowLevelILLabel]', arg3: 'ctypes.pointer[BNLowLevelILLabel]', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILIfWithLocation(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNLowLevelILLabel]', arg3: 'ctypes.pointer[BNLowLevelILLabel]', arg4: 'int', arg5: 'int', ) -> 'ctypes.c_uint64': ...
def _BNLowLevelILInitLabel(arg0: 'ctypes.pointer[BNLowLevelILLabel]', ) -> 'None': ...
def _BNLowLevelILMarkLabel(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNLowLevelILLabel]', ) -> 'None': ...
def _BNLowLevelILSetCurrentAddress(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'None': ...
def _BNLowLevelILSetCurrentSourceBlock(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNLowLevelILSetExprSourceOperand(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNLowLevelILSetIndirectBranches(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNArchitectureAndAddress]', arg2: 'int', ) -> 'None': ...
def _BNMarkBasicBlockAsRecentlyUsed(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNMarkCallerUpdatesRequired(arg0: 'ctypes.pointer[BNFunction]', arg1: 'FunctionUpdateTypeEnum', ) -> 'None': ...
def _BNMarkFileModified(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNMarkFileSaved(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'None': ...
def _BNMarkFunctionAsRecentlyUsed(arg0: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNMarkMediumLevelILInstructionForRemoval(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'None': ...
def _BNMarkUpdatesRequired(arg0: 'ctypes.pointer[BNFunction]', arg1: 'FunctionUpdateTypeEnum', ) -> 'None': ...
def _BNMarkdownToHTML(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNMediumLevelILAddExpr(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'MediumLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILAddExprWithLocation(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'MediumLevelILOperationEnum', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', arg6: 'int', arg7: 'int', arg8: 'int', arg9: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILAddInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILAddLabelMap(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'ctypes.pointer[ctypes.pointer[BNMediumLevelILLabel]]', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILAddOperandList(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[ctypes.c_uint64]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILFreeOperandList(arg0: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'None': ...
def _BNMediumLevelILGetCurrentAddress(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILGetInstructionStart(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILGetOperandList(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint64]': ...
def _BNMediumLevelILGoto(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNMediumLevelILLabel]', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILGotoWithLocation(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNMediumLevelILLabel]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILIf(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNMediumLevelILLabel]', arg3: 'ctypes.pointer[BNMediumLevelILLabel]', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILIfWithLocation(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'ctypes.pointer[BNMediumLevelILLabel]', arg3: 'ctypes.pointer[BNMediumLevelILLabel]', arg4: 'int', arg5: 'int', ) -> 'ctypes.c_uint64': ...
def _BNMediumLevelILInitLabel(arg0: 'ctypes.pointer[BNMediumLevelILLabel]', ) -> 'None': ...
def _BNMediumLevelILMarkLabel(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNMediumLevelILLabel]', ) -> 'None': ...
def _BNMediumLevelILSetCurrentAddress(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', ) -> 'None': ...
def _BNMergeUserAnalysis(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', arg2: 'Optional[ctypes.c_void_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'int', ) -> 'BNMergeResult': ...
def _BNMetadataArrayAppend(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataGetArray(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNMetadata]]': ...
def _BNMetadataGetBoolean(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataGetDouble(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_float': ...
def _BNMetadataGetForIndex(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'int', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNMetadataGetForKey(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'str', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNMetadataGetRaw(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_uint8]': ...
def _BNMetadataGetSignedInteger(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_int64': ...
def _BNMetadataGetString(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_char_p': ...
def _BNMetadataGetType(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'MetadataTypeEnum': ...
def _BNMetadataGetUnsignedInteger(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_uint64': ...
def _BNMetadataGetValueStore(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.pointer[BNMetadataValueStore]': ...
def _BNMetadataIsArray(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsBoolean(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsDouble(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsEqual(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsKeyValueStore(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsRaw(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsSignedInteger(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsString(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataIsUnsignedInteger(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataRemoveIndex(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'int', ) -> 'None': ...
def _BNMetadataRemoveKey(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'str', ) -> 'None': ...
def _BNMetadataSetValueForKey(arg0: 'ctypes.pointer[BNMetadata]', arg1: 'str', arg2: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_bool': ...
def _BNMetadataSize(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.c_uint64': ...
def _BNNavigate(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNNewActivityReference(arg0: 'ctypes.pointer[BNActivity]', ) -> 'ctypes.pointer[BNActivity]': ...
def _BNNewAnalysisCompletionEventReference(arg0: 'ctypes.pointer[BNAnalysisCompletionEvent]', ) -> 'ctypes.pointer[BNAnalysisCompletionEvent]': ...
def _BNNewAnalysisContextReference(arg0: 'ctypes.pointer[BNAnalysisContext]', ) -> 'ctypes.pointer[BNAnalysisContext]': ...
def _BNNewBackgroundTaskReference(arg0: 'ctypes.pointer[BNBackgroundTask]', ) -> 'ctypes.pointer[BNBackgroundTask]': ...
def _BNNewBasicBlockReference(arg0: 'ctypes.pointer[BNBasicBlock]', ) -> 'ctypes.pointer[BNBasicBlock]': ...
def _BNNewCallingConventionReference(arg0: 'ctypes.pointer[BNCallingConvention]', ) -> 'ctypes.pointer[BNCallingConvention]': ...
def _BNNewDataRendererReference(arg0: 'ctypes.pointer[BNDataRenderer]', ) -> 'ctypes.pointer[BNDataRenderer]': ...
def _BNNewDatabaseReference(arg0: 'ctypes.pointer[BNDatabase]', ) -> 'ctypes.pointer[BNDatabase]': ...
def _BNNewDebugInfoParserReference(arg0: 'ctypes.pointer[BNDebugInfoParser]', ) -> 'ctypes.pointer[BNDebugInfoParser]': ...
def _BNNewDebugInfoReference(arg0: 'ctypes.pointer[BNDebugInfo]', ) -> 'ctypes.pointer[BNDebugInfo]': ...
def _BNNewDisassemblySettingsReference(arg0: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'ctypes.pointer[BNDisassemblySettings]': ...
def _BNNewDisassemblyTextRendererReference(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'ctypes.pointer[BNDisassemblyTextRenderer]': ...
def _BNNewDownloadInstanceReference(arg0: 'ctypes.pointer[BNDownloadInstance]', ) -> 'ctypes.pointer[BNDownloadInstance]': ...
def _BNNewEnumerationReference(arg0: 'ctypes.pointer[BNEnumeration]', ) -> 'ctypes.pointer[BNEnumeration]': ...
def _BNNewFileReference(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.pointer[BNFileMetadata]': ...
def _BNNewFlowGraphLayoutRequestReference(arg0: 'ctypes.pointer[BNFlowGraphLayoutRequest]', ) -> 'ctypes.pointer[BNFlowGraphLayoutRequest]': ...
def _BNNewFlowGraphNodeReference(arg0: 'ctypes.pointer[BNFlowGraphNode]', ) -> 'ctypes.pointer[BNFlowGraphNode]': ...
def _BNNewFlowGraphReference(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNNewFunctionReference(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.pointer[BNFunction]': ...
def _BNNewHighLevelILFunctionReference(arg0: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'ctypes.pointer[BNHighLevelILFunction]': ...
def _BNNewKeyValueStoreReference(arg0: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNNewLanguageRepresentationFunctionReference(arg0: 'ctypes.pointer[BNLanguageRepresentationFunction]', ) -> 'ctypes.pointer[BNLanguageRepresentationFunction]': ...
def _BNNewLinearViewCursorReference(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.pointer[BNLinearViewCursor]': ...
def _BNNewLinearViewObjectReference(arg0: 'ctypes.pointer[BNLinearViewObject]', ) -> 'ctypes.pointer[BNLinearViewObject]': ...
def _BNNewLoggerReference(arg0: 'ctypes.pointer[BNLogger]', ) -> 'ctypes.pointer[BNLogger]': ...
def _BNNewLowLevelILFunctionReference(arg0: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'ctypes.pointer[BNLowLevelILFunction]': ...
def _BNNewMainThreadActionReference(arg0: 'ctypes.pointer[BNMainThreadAction]', ) -> 'ctypes.pointer[BNMainThreadAction]': ...
def _BNNewMediumLevelILFunctionReference(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'ctypes.pointer[BNMediumLevelILFunction]': ...
def _BNNewMetadataReference(arg0: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNNewNamedTypeReference(arg0: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'ctypes.pointer[BNNamedTypeReference]': ...
def _BNNewPlatformReference(arg0: 'ctypes.pointer[BNPlatform]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNNewPluginReference(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.pointer[BNRepoPlugin]': ...
def _BNNewRelocationHandlerReference(arg0: 'ctypes.pointer[BNRelocationHandler]', ) -> 'ctypes.pointer[BNRelocationHandler]': ...
def _BNNewRelocationReference(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.pointer[BNRelocation]': ...
def _BNNewReportCollectionReference(arg0: 'ctypes.pointer[BNReportCollection]', ) -> 'ctypes.pointer[BNReportCollection]': ...
def _BNNewRepositoryManagerReference(arg0: 'ctypes.pointer[BNRepositoryManager]', ) -> 'ctypes.pointer[BNRepositoryManager]': ...
def _BNNewRepositoryReference(arg0: 'ctypes.pointer[BNRepository]', ) -> 'ctypes.pointer[BNRepository]': ...
def _BNNewSaveSettingsReference(arg0: 'ctypes.pointer[BNSaveSettings]', ) -> 'ctypes.pointer[BNSaveSettings]': ...
def _BNNewScriptingInstanceReference(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'ctypes.pointer[BNScriptingInstance]': ...
def _BNNewSectionReference(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.pointer[BNSection]': ...
def _BNNewSegmentReference(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.pointer[BNSegment]': ...
def _BNNewSettingsReference(arg0: 'ctypes.pointer[BNSettings]', ) -> 'ctypes.pointer[BNSettings]': ...
def _BNNewSnapshotReference(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNSnapshot]': ...
def _BNNewStructureReference(arg0: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNNewSymbolReference(arg0: 'ctypes.pointer[BNSymbol]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNNewTagReference(arg0: 'ctypes.pointer[BNTag]', ) -> 'ctypes.pointer[BNTag]': ...
def _BNNewTagTypeReference(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNNewTemporaryFileReference(arg0: 'ctypes.pointer[BNTemporaryFile]', ) -> 'ctypes.pointer[BNTemporaryFile]': ...
def _BNNewTypeLibrary(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNNewTypeLibraryReference(arg0: 'ctypes.pointer[BNTypeLibrary]', ) -> 'ctypes.pointer[BNTypeLibrary]': ...
def _BNNewTypeReference(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.pointer[BNType]': ...
def _BNNewUserReference(arg0: 'ctypes.pointer[BNUser]', ) -> 'ctypes.pointer[BNUser]': ...
def _BNNewViewReference(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNNewWebsocketClientReference(arg0: 'ctypes.pointer[BNWebsocketClient]', ) -> 'ctypes.pointer[BNWebsocketClient]': ...
def _BNNewWorkflowReference(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNNotifyDataInserted(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNNotifyDataRemoved(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNNotifyDataWritten(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNNotifyErrorForScriptingInstance(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'str', ) -> 'None': ...
def _BNNotifyInputReadyStateForScriptingInstance(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ScriptingProviderInputReadyStateEnum', ) -> 'None': ...
def _BNNotifyOutputForScriptingInstance(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'str', ) -> 'None': ...
def _BNNotifyProgressForDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNNotifyWebsocketClientConnect(arg0: 'ctypes.pointer[BNWebsocketClient]', ) -> 'ctypes.c_bool': ...
def _BNNotifyWebsocketClientDisconnect(arg0: 'ctypes.pointer[BNWebsocketClient]', ) -> 'None': ...
def _BNNotifyWebsocketClientError(arg0: 'ctypes.pointer[BNWebsocketClient]', arg1: 'str', ) -> 'None': ...
def _BNNotifyWebsocketClientReadData(arg0: 'ctypes.pointer[BNWebsocketClient]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNOpenDatabaseForConfiguration(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNOpenExistingDatabase(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNOpenExistingDatabaseWithProgress(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', arg2: 'Optional[ctypes.c_void_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNOpenProject(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNOpenUrl(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNParseBinaryViewOfType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNParseDebugInfo(arg0: 'ctypes.pointer[BNDebugInfoParser]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[BNDebugInfo]', ) -> 'ctypes.pointer[BNDebugInfo]': ...
def _BNParseExpression(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNParsePossibleValueSet(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'RegisterValueTypeEnum', arg3: 'ctypes.pointer[BNPossibleValueSet]', arg4: 'int', arg5: 'ctypes.pointer[ctypes.c_char_p]', ) -> 'ctypes.c_bool': ...
def _BNParseTypeString(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNQualifiedNameAndType]', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[BNQualifiedNameList]', ) -> 'ctypes.c_bool': ...
def _BNParseTypesFromSource(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[BNTypeParserResult]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'ctypes.pointer[ctypes.c_char_p]', arg6: 'int', arg7: 'str', ) -> 'ctypes.c_bool': ...
def _BNParseTypesFromSourceFile(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'str', arg2: 'ctypes.pointer[BNTypeParserResult]', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'int', arg6: 'str', ) -> 'ctypes.c_bool': ...
def _BNParseTypesString(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNTypeParserResult]', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[BNQualifiedNameList]', ) -> 'ctypes.c_bool': ...
def _BNPathExists(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNPerformCustomRequest(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'str', arg2: 'str', arg3: 'int', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'ctypes.pointer[ctypes.c_char_p]', arg6: 'ctypes.pointer[ctypes.pointer[BNDownloadInstanceResponse]]', arg7: 'ctypes.pointer[BNDownloadInstanceInputOutputCallbacks]', ) -> 'ctypes.c_int32': ...
def _BNPerformDownloadRequest(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'str', arg2: 'ctypes.pointer[BNDownloadInstanceOutputCallbacks]', ) -> 'ctypes.c_int32': ...
def _BNPluginAreDependenciesBeingInstalled(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginDisable(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginEnable(arg0: 'ctypes.pointer[BNRepoPlugin]', arg1: 'bool', ) -> 'ctypes.c_bool': ...
def _BNPluginGetApis(arg0: 'ctypes.pointer[BNRepoPlugin]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNPluginGetAuthor(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetAuthorUrl(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetCommit(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetDependencies(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetDescription(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetInstallInstructions(arg0: 'ctypes.pointer[BNRepoPlugin]', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetLastUpdate(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_uint64': ...
def _BNPluginGetLicense(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetLicenseText(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetLongdescription(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetMinimumVersion(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_uint64': ...
def _BNPluginGetName(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetPackageUrl(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetPath(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetPlatforms(arg0: 'ctypes.pointer[BNRepoPlugin]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNPluginGetPluginStatus(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'PluginStatusEnum': ...
def _BNPluginGetPluginTypes(arg0: 'ctypes.pointer[BNRepoPlugin]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[PluginTypeEnum]': ...
def _BNPluginGetProjectData(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetProjectUrl(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetRepository(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetSubdir(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginGetVersion(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_char_p': ...
def _BNPluginInstall(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginInstallDependencies(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsBeingDeleted(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsBeingUpdated(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsDeletePending(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsDisablePending(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsEnabled(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsInstalled(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsRunning(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsUpdateAvailable(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginIsUpdatePending(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginUninstall(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPluginUpdate(arg0: 'ctypes.pointer[BNRepoPlugin]', ) -> 'ctypes.c_bool': ...
def _BNPostProcessDisassemblyTextRendererLines(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'int', arg2: 'int', arg3: 'ctypes.pointer[BNDisassemblyTextLine]', arg4: 'int', arg5: 'ctypes.pointer[ctypes.c_uint64]', arg6: 'str', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNPrepareToCopyLowLevelILBasicBlock(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNPrepareToCopyLowLevelILFunction(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNPrepareToCopyMediumLevelILBasicBlock(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNPrepareToCopyMediumLevelILFunction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'None': ...
def _BNPreprocessSource(arg0: 'str', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_char_p]', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'int', ) -> 'ctypes.c_bool': ...
def _BNRangeContainsRelocation(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNRead16(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint16]', ) -> 'ctypes.c_bool': ...
def _BNRead32(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint32]', ) -> 'ctypes.c_bool': ...
def _BNRead64(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNRead8(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint8]', ) -> 'ctypes.c_bool': ...
def _BNReadBE16(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint16]', ) -> 'ctypes.c_bool': ...
def _BNReadBE32(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint32]', ) -> 'ctypes.c_bool': ...
def _BNReadBE64(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNReadData(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNReadDataForDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', ) -> 'ctypes.c_int64': ...
def _BNReadDatabaseAnalysisCache(arg0: 'ctypes.pointer[BNDatabase]', ) -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNReadDatabaseGlobal(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNReadDatabaseGlobalData(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'str', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNReadLE16(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint16]', ) -> 'ctypes.c_bool': ...
def _BNReadLE32(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint32]', ) -> 'ctypes.c_bool': ...
def _BNReadLE64(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNReadSnapshotData(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNReadSnapshotDataWithProgress(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.pointer[BNKeyValueStore]': ...
def _BNReadViewBuffer(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNReadViewData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNReanalyzeAllFunctions(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNReanalyzeFunction(arg0: 'ctypes.pointer[BNFunction]', arg1: 'FunctionUpdateTypeEnum', ) -> 'None': ...
def _BNRebase(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNRebaseWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'Optional[ctypes.c_void_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_bool': ...
def _BNRecognizePlatformForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'EndiannessEnum', arg3: 'ctypes.pointer[BNBinaryView]', arg4: 'ctypes.pointer[BNMetadata]', ) -> 'ctypes.pointer[BNPlatform]': ...
def _BNRedo(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNRegisterArchitecture(arg0: 'str', arg1: 'ctypes.pointer[BNCustomArchitecture]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNRegisterArchitectureExtension(arg0: 'str', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNCustomArchitecture]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNRegisterArchitectureForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'EndiannessEnum', arg3: 'ctypes.pointer[BNArchitecture]', ) -> 'None': ...
def _BNRegisterArchitectureFunctionRecognizer(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNFunctionRecognizer]', ) -> 'None': ...
def _BNRegisterArchitectureHook(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCustomArchitecture]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNRegisterBinaryViewEvent(arg0: 'BinaryViewEventTypeEnum', arg1: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ], None]', arg2: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterBinaryViewType(arg0: 'str', arg1: 'str', arg2: 'ctypes.pointer[BNCustomBinaryViewType]', ) -> 'ctypes.pointer[BNBinaryViewType]': ...
def _BNRegisterCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterDataNotification(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNBinaryDataNotification]', ) -> 'None': ...
def _BNRegisterDebugInfoParser(arg0: 'str', arg1: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ], ctypes.c_bool]', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNDebugInfo], ctypes.pointer[BNBinaryView], ], None]', arg3: 'Optional[ctypes.c_void_p]', ) -> 'ctypes.pointer[BNDebugInfoParser]': ...
def _BNRegisterDefaultPlatformForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNRegisterDownloadProvider(arg0: 'str', arg1: 'ctypes.pointer[BNDownloadProviderCallbacks]', ) -> 'ctypes.pointer[BNDownloadProvider]': ...
def _BNRegisterGenericDataRenderer(arg0: 'ctypes.pointer[BNDataRendererContainer]', arg1: 'ctypes.pointer[BNDataRenderer]', ) -> 'None': ...
def _BNRegisterGlobalFunctionRecognizer(arg0: 'ctypes.pointer[BNFunctionRecognizer]', ) -> 'None': ...
def _BNRegisterInteractionHandler(arg0: 'ctypes.pointer[BNInteractionHandlerCallbacks]', ) -> 'None': ...
def _BNRegisterLogListener(arg0: 'ctypes.pointer[BNLogListener]', ) -> 'None': ...
def _BNRegisterMainThread(arg0: 'ctypes.pointer[BNMainThreadCallbacks]', ) -> 'None': ...
def _BNRegisterObjectDestructionCallbacks(arg0: 'ctypes.pointer[BNObjectDestructionCallbacks]', ) -> 'None': ...
def _BNRegisterObjectRefDebugTrace(arg0: 'str', ) -> 'Optional[ctypes.c_void_p]': ...
def _BNRegisterPlatform(arg0: 'str', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNRegisterPlatformCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterPlatformCdeclCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterPlatformDefaultCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterPlatformFastcallCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterPlatformForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNRegisterPlatformRecognizerForViewType(arg0: 'ctypes.pointer[BNBinaryViewType]', arg1: 'int', arg2: 'EndiannessEnum', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNMetadata], ], ctypes.c_void_p]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPlatformStdcallCallingConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNRegisterPlatformTypes(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNRegisterPluginCommand(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForAddress(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], int, ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForFunction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNFunction], ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNFunction], ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForHighLevelILFunction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNHighLevelILFunction], ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNHighLevelILFunction], ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForHighLevelILInstruction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNHighLevelILFunction], int, ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNHighLevelILFunction], int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForLowLevelILFunction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNLowLevelILFunction], ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNLowLevelILFunction], ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForLowLevelILInstruction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNLowLevelILFunction], int, ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNLowLevelILFunction], int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForMediumLevelILFunction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNMediumLevelILFunction], ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNMediumLevelILFunction], ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForMediumLevelILInstruction(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNMediumLevelILFunction], int, ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], ctypes.pointer[BNMediumLevelILFunction], int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterPluginCommandForRange(arg0: 'str', arg1: 'str', arg2: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], int, int, ], None]', arg3: 'Callable[[Optional[ctypes.c_void_p], ctypes.pointer[BNBinaryView], int, int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNRegisterScriptingInstanceOutputListener(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ctypes.pointer[BNScriptingOutputListener]', ) -> 'None': ...
def _BNRegisterScriptingProvider(arg0: 'str', arg1: 'str', arg2: 'ctypes.pointer[BNScriptingProviderCallbacks]', ) -> 'ctypes.pointer[BNScriptingProvider]': ...
def _BNRegisterSecretsProvider(arg0: 'str', arg1: 'ctypes.pointer[BNSecretsProviderCallbacks]', ) -> 'ctypes.pointer[BNSecretsProvider]': ...
def _BNRegisterTransformType(arg0: 'TransformTypeEnum', arg1: 'str', arg2: 'str', arg3: 'str', arg4: 'ctypes.pointer[BNCustomTransform]', ) -> 'ctypes.pointer[BNTransform]': ...
def _BNRegisterTypeParser(arg0: 'str', arg1: 'ctypes.pointer[BNTypeParserCallbacks]', ) -> 'ctypes.pointer[BNTypeParser]': ...
def _BNRegisterTypePrinter(arg0: 'str', arg1: 'ctypes.pointer[BNTypePrinterCallbacks]', ) -> 'ctypes.pointer[BNTypePrinter]': ...
def _BNRegisterTypeSpecificDataRenderer(arg0: 'ctypes.pointer[BNDataRendererContainer]', arg1: 'ctypes.pointer[BNDataRenderer]', ) -> 'None': ...
def _BNRegisterWebsocketProvider(arg0: 'str', arg1: 'ctypes.pointer[BNWebsocketProviderCallbacks]', ) -> 'ctypes.pointer[BNWebsocketProvider]': ...
def _BNRegisterWorkflow(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNReleaseAdvancedFunctionAnalysisData(arg0: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNReleaseAdvancedFunctionAnalysisDataMultiple(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', ) -> 'None': ...
def _BNReleaseEnterpriseServerLicense() -> 'ctypes.c_bool': ...
def _BNRelocationGetArchitecture(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.pointer[BNArchitecture]': ...
def _BNRelocationGetInfo(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'BNRelocationInfo': ...
def _BNRelocationGetReloc(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.c_uint64': ...
def _BNRelocationGetSymbol(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.pointer[BNSymbol]': ...
def _BNRelocationGetTarget(arg0: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.c_uint64': ...
def _BNRelocationHandlerApplyRelocation(arg0: 'ctypes.pointer[BNRelocationHandler]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'ctypes.pointer[BNRelocation]', arg4: 'ctypes.pointer[ctypes.c_uint8]', arg5: 'int', ) -> 'ctypes.c_bool': ...
def _BNRelocationHandlerDefaultApplyRelocation(arg0: 'ctypes.pointer[BNRelocationHandler]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'ctypes.pointer[BNRelocation]', arg4: 'ctypes.pointer[ctypes.c_uint8]', arg5: 'int', ) -> 'ctypes.c_bool': ...
def _BNRelocationHandlerGetOperandForExternalRelocation(arg0: 'ctypes.pointer[BNRelocationHandler]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', arg3: 'int', arg4: 'ctypes.pointer[BNLowLevelILFunction]', arg5: 'ctypes.pointer[BNRelocation]', ) -> 'ctypes.c_uint64': ...
def _BNRelocationHandlerGetRelocationInfo(arg0: 'ctypes.pointer[BNRelocationHandler]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'ctypes.pointer[BNArchitecture]', arg3: 'ctypes.pointer[BNRelocationInfo]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNRemoveAnalysisFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNRemoveAutoAddressTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveAutoAddressTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveAutoDataTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveAutoDataTagsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveAutoFunctionTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveAutoFunctionTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveAutoSection(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'None': ...
def _BNRemoveAutoSegment(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNRemoveDatabaseSnapshot(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNRemoveEnumerationBuilderMember(arg0: 'ctypes.pointer[BNEnumerationBuilder]', arg1: 'int', ) -> 'None': ...
def _BNRemoveStructureBuilderMember(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'int', ) -> 'None': ...
def _BNRemoveTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTag]', arg2: 'bool', ) -> 'None': ...
def _BNRemoveTagReference(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'BNTagReference', ) -> 'None': ...
def _BNRemoveTagType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveUserAddressTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveUserAddressTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveUserCodeReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'None': ...
def _BNRemoveUserDataReference(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNRemoveUserDataTag(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveUserDataTagsOfType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveUserFunction(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNRemoveUserFunctionTag(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTag]', ) -> 'None': ...
def _BNRemoveUserFunctionTagsOfType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTagType]', ) -> 'None': ...
def _BNRemoveUserSection(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'None': ...
def _BNRemoveUserSegment(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNRemoveUserTypeFieldReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNQualifiedName]', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNRemoveUserTypeReference(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNRemoveViewData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNRenameAnalysisType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', arg2: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNRenameFile(arg0: 'str', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNRenderLinesForData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNType]', arg3: 'ctypes.pointer[BNInstructionTextToken]', arg4: 'int', arg5: 'int', arg6: 'ctypes.pointer[ctypes.c_uint64]', arg7: 'ctypes.pointer[BNTypeContext]', arg8: 'int', ) -> 'ctypes.pointer[BNDisassemblyTextLine]': ...
def _BNReplaceEnumerationBuilderMember(arg0: 'ctypes.pointer[BNEnumerationBuilder]', arg1: 'int', arg2: 'str', arg3: 'int', ) -> 'None': ...
def _BNReplaceHighLevelILExpr(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNReplaceLowLevelILExpr(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNReplaceMediumLevelILExpr(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNReplaceMediumLevelILInstruction(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNReplaceStructureBuilderMember(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'int', arg2: 'ctypes.pointer[BNTypeWithConfidence]', arg3: 'str', arg4: 'bool', ) -> 'None': ...
def _BNRepositoryFreePluginDirectoryList(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'None': ...
def _BNRepositoryGetPluginByPath(arg0: 'ctypes.pointer[BNRepository]', arg1: 'str', ) -> 'ctypes.pointer[BNRepoPlugin]': ...
def _BNRepositoryGetPlugins(arg0: 'ctypes.pointer[BNRepository]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNRepoPlugin]]': ...
def _BNRepositoryGetPluginsPath(arg0: 'ctypes.pointer[BNRepository]', ) -> 'ctypes.c_char_p': ...
def _BNRepositoryGetRepoPath(arg0: 'ctypes.pointer[BNRepository]', ) -> 'ctypes.c_char_p': ...
def _BNRepositoryGetRepositoryByPath(arg0: 'ctypes.pointer[BNRepositoryManager]', arg1: 'str', ) -> 'ctypes.pointer[BNRepository]': ...
def _BNRepositoryGetUrl(arg0: 'ctypes.pointer[BNRepository]', ) -> 'ctypes.c_char_p': ...
def _BNRepositoryManagerAddRepository(arg0: 'ctypes.pointer[BNRepositoryManager]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNRepositoryManagerCheckForUpdates(arg0: 'ctypes.pointer[BNRepositoryManager]', ) -> 'ctypes.c_bool': ...
def _BNRepositoryManagerGetDefaultRepository(arg0: 'ctypes.pointer[BNRepositoryManager]', ) -> 'ctypes.pointer[BNRepository]': ...
def _BNRepositoryManagerGetRepositories(arg0: 'ctypes.pointer[BNRepositoryManager]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.pointer[BNRepository]]': ...
def _BNRequestAdvancedFunctionAnalysisData(arg0: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNRequestFunctionDebugReport(arg0: 'ctypes.pointer[BNFunction]', arg1: 'str', ) -> 'None': ...
def _BNResetDisassemblyTextRendererDeduplicatedComments(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', ) -> 'None': ...
def _BNRustFreeString(arg0: 'str', ) -> 'None': ...
def _BNRustFreeStringArray(arg0: 'ctypes.pointer[ctypes.c_char_p]', arg1: 'int', ) -> 'None': ...
def _BNRustSimplifyStrToFQN(arg0: 'str', arg1: 'bool', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNRustSimplifyStrToStr(arg0: 'str', ) -> 'ctypes.c_char_p': ...
def _BNSaveAutoSnapshot(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSaveSettings]', ) -> 'ctypes.c_bool': ...
def _BNSaveAutoSnapshotWithProgress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg3: 'ctypes.pointer[BNSaveSettings]', ) -> 'ctypes.c_bool': ...
def _BNSaveLastRun() -> 'None': ...
def _BNSaveToFile(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNFileAccessor]', ) -> 'ctypes.c_bool': ...
def _BNSaveToFilename(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNScriptingInstanceCompleteInput(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'str', arg2: 'int', ) -> 'ctypes.c_char_p': ...
def _BNSecretsProviderHasData(arg0: 'ctypes.pointer[BNSecretsProvider]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNSectionGetAlign(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetEnd(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetEntrySize(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetInfoData(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetInfoSection(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_char_p': ...
def _BNSectionGetLength(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetLinkedSection(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_char_p': ...
def _BNSectionGetName(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_char_p': ...
def _BNSectionGetSemantics(arg0: 'ctypes.pointer[BNSection]', ) -> 'SectionSemanticsEnum': ...
def _BNSectionGetStart(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_uint64': ...
def _BNSectionGetType(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_char_p': ...
def _BNSectionIsAutoDefined(arg0: 'ctypes.pointer[BNSection]', ) -> 'ctypes.c_bool': ...
def _BNSeekBinaryReader(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'int', ) -> 'None': ...
def _BNSeekBinaryReaderRelative(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'int', ) -> 'None': ...
def _BNSeekBinaryWriter(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'None': ...
def _BNSeekBinaryWriterRelative(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'None': ...
def _BNSeekLinearViewCursorToAddress(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'int', ) -> 'None': ...
def _BNSeekLinearViewCursorToBegin(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'None': ...
def _BNSeekLinearViewCursorToCursorPath(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'ctypes.c_bool': ...
def _BNSeekLinearViewCursorToCursorPathAndAddress(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[BNLinearViewCursor]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNSeekLinearViewCursorToEnd(arg0: 'ctypes.pointer[BNLinearViewCursor]', ) -> 'None': ...
def _BNSeekLinearViewCursorToOrderingIndex(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'int', ) -> 'None': ...
def _BNSeekLinearViewCursorToPath(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[BNLinearViewObjectIdentifier]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNSeekLinearViewCursorToPathAndAddress(arg0: 'ctypes.pointer[BNLinearViewCursor]', arg1: 'ctypes.pointer[BNLinearViewObjectIdentifier]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNSegmentGetDataEnd(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetDataLength(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetDataOffset(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetEnd(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetFlags(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint32': ...
def _BNSegmentGetLength(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetRelocationRanges(arg0: 'ctypes.pointer[BNSegment]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRange]': ...
def _BNSegmentGetRelocationRangesAtAddress(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[BNRange]': ...
def _BNSegmentGetRelocationsCount(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentGetStart(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_uint64': ...
def _BNSegmentIsAutoDefined(arg0: 'ctypes.pointer[BNSegment]', ) -> 'ctypes.c_bool': ...
def _BNSegmentRangeContainsRelocation(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNSegmentSetDataLength(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', ) -> 'None': ...
def _BNSegmentSetDataOffset(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', ) -> 'None': ...
def _BNSegmentSetFlags(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', ) -> 'None': ...
def _BNSegmentSetLength(arg0: 'ctypes.pointer[BNSegment]', arg1: 'int', ) -> 'None': ...
def _BNSerializeSettings(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', ) -> 'ctypes.c_char_p': ...
def _BNSetActiveUpdateChannel(arg0: 'str', ) -> 'None': ...
def _BNSetAnalysisHold(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'bool', ) -> 'None': ...
def _BNSetArchitectureCdeclCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNSetArchitectureDefaultCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNSetArchitectureFastcallCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNSetArchitectureStdcallCallingConvention(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNSetAutoBasicBlockHighlight(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'BNHighlightColor', ) -> 'None': ...
def _BNSetAutoCallRegisterStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNRegisterStackAdjustment]', arg4: 'int', ) -> 'None': ...
def _BNSetAutoCallRegisterStackAdjustmentForRegisterStack(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNSetAutoCallStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'None': ...
def _BNSetAutoCallTypeAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionCallingConvention(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNCallingConventionWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionCanReturn(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionClobberedRegisters(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterSetWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionHasVariableArguments(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionParameterVariables(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNParameterVariablesWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionRegisterStackAdjustments(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterStackAdjustment]', arg2: 'int', ) -> 'None': ...
def _BNSetAutoFunctionReturnRegisters(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterSetWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionReturnType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNSetAutoFunctionStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNOffsetWithConfidence]', ) -> 'None': ...
def _BNSetAutoIndirectBranches(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNArchitectureAndAddress]', arg4: 'int', ) -> 'None': ...
def _BNSetAutoInstructionHighlight(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'BNHighlightColor', ) -> 'None': ...
def _BNSetAutoUpdatesEnabled(arg0: 'bool', ) -> 'None': ...
def _BNSetBackgroundTaskProgressText(arg0: 'ctypes.pointer[BNBackgroundTask]', arg1: 'str', ) -> 'None': ...
def _BNSetBasicBlockList(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'ctypes.pointer[ctypes.pointer[BNBasicBlock]]', arg2: 'int', ) -> 'None': ...
def _BNSetBinaryReaderEndianness(arg0: 'ctypes.pointer[BNBinaryReader]', arg1: 'EndiannessEnum', ) -> 'None': ...
def _BNSetBinaryViewTypeArchitectureConstant(arg0: 'ctypes.pointer[BNArchitecture]', arg1: 'str', arg2: 'str', arg3: 'int', ) -> 'None': ...
def _BNSetBinaryWriterEndianness(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'EndiannessEnum', ) -> 'None': ...
def _BNSetBundledPluginDirectory(arg0: 'str', ) -> 'None': ...
def _BNSetCommentForAddress(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'str', ) -> 'None': ...
def _BNSetCurrentPluginLoadOrder(arg0: 'PluginLoadOrderEnum', ) -> 'None': ...
def _BNSetDataBufferByte(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNSetDataBufferContents(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', ) -> 'None': ...
def _BNSetDataBufferLength(arg0: 'ctypes.pointer[BNDataBuffer]', arg1: 'int', ) -> 'None': ...
def _BNSetDatabaseCurrentSnapshot(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'int', ) -> 'None': ...
def _BNSetDebugInfo(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNDebugInfo]', ) -> 'None': ...
def _BNSetDefaultArchitecture(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', ) -> 'None': ...
def _BNSetDefaultPlatform(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNPlatform]', ) -> 'None': ...
def _BNSetDisassemblyGutterWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', arg1: 'int', ) -> 'None': ...
def _BNSetDisassemblyMaximumSymbolWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', arg1: 'int', ) -> 'None': ...
def _BNSetDisassemblySettingsOption(arg0: 'ctypes.pointer[BNDisassemblySettings]', arg1: 'DisassemblyOptionEnum', arg2: 'bool', ) -> 'None': ...
def _BNSetDisassemblyTextRendererArchitecture(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNArchitecture]', ) -> 'None': ...
def _BNSetDisassemblyTextRendererBasicBlock(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNSetDisassemblyTextRendererSettings(arg0: 'ctypes.pointer[BNDisassemblyTextRenderer]', arg1: 'ctypes.pointer[BNDisassemblySettings]', ) -> 'None': ...
def _BNSetDisassemblyWidth(arg0: 'ctypes.pointer[BNDisassemblySettings]', arg1: 'int', ) -> 'None': ...
def _BNSetEnterpriseServerUrl(arg0: 'str', ) -> 'ctypes.c_bool': ...
def _BNSetErrorForDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'str', ) -> 'None': ...
def _BNSetFileMetadataNavigationHandler(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'ctypes.pointer[BNNavigationHandler]', ) -> 'None': ...
def _BNSetFilename(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'None': ...
def _BNSetFlowGraphBasicBlock(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNSetFlowGraphHighLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'None': ...
def _BNSetFlowGraphLowLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNSetFlowGraphMediumLevelILFunction(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'None': ...
def _BNSetFlowGraphNodeHighlight(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'BNHighlightColor', ) -> 'None': ...
def _BNSetFlowGraphNodeLines(arg0: 'ctypes.pointer[BNFlowGraphNode]', arg1: 'ctypes.pointer[BNDisassemblyTextLine]', arg2: 'int', ) -> 'None': ...
def _BNSetFlowGraphNodeMargins(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNSetFlowGraphOption(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'FlowGraphOptionEnum', arg2: 'bool', ) -> 'None': ...
def _BNSetFunctionAnalysisSkipOverride(arg0: 'ctypes.pointer[BNFunction]', arg1: 'FunctionAnalysisSkipOverrideEnum', ) -> 'None': ...
def _BNSetFunctionAutoType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNSetFunctionComment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'str', ) -> 'None': ...
def _BNSetFunctionForFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNSetFunctionTypeBuilderCanReturn(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNSetFunctionTypeBuilderParameters(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNFunctionParameter]', arg2: 'int', ) -> 'None': ...
def _BNSetFunctionUserType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNType]', ) -> 'None': ...
def _BNSetFunctionVariableDeadStoreElimination(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'DeadStoreEliminationEnum', ) -> 'None': ...
def _BNSetGlobalCommentForAddress(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'str', ) -> 'None': ...
def _BNSetHighLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'ctypes.pointer[BNHighLevelILFunction]', ) -> 'None': ...
def _BNSetHighLevelILRootExpr(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', ) -> 'None': ...
def _BNSetIntegerConstantDisplayType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'IntegerDisplayTypeEnum', ) -> 'None': ...
def _BNSetIntegerTypeDisplayType(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'IntegerDisplayTypeEnum', ) -> 'None': ...
def _BNSetKeyValueStoreBuffer(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', arg2: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_bool': ...
def _BNSetKeyValueStoreValue(arg0: 'ctypes.pointer[BNKeyValueStore]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNSetLicense(arg0: 'str', ) -> 'None': ...
def _BNSetLiftedILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNSetLowLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'ctypes.pointer[BNLowLevelILFunction]', ) -> 'None': ...
def _BNSetMaxFunctionSizeForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'None': ...
def _BNSetMediumLevelILFunction(arg0: 'ctypes.pointer[BNAnalysisContext]', arg1: 'ctypes.pointer[BNMediumLevelILFunction]', ) -> 'None': ...
def _BNSetNamedTypeReferenceBuilderName(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNSetNamedTypeReferenceBuilderTypeClass(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', arg1: 'NamedTypeReferenceClassEnum', ) -> 'None': ...
def _BNSetNamedTypeReferenceBuilderTypeId(arg0: 'ctypes.pointer[BNNamedTypeReferenceBuilder]', arg1: 'str', ) -> 'None': ...
def _BNSetNewAutoFunctionAnalysisSuppressed(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'bool', ) -> 'None': ...
def _BNSetOriginalFilename(arg0: 'ctypes.pointer[BNFileMetadata]', arg1: 'str', ) -> 'None': ...
def _BNSetParametersForAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'BNAnalysisParameters', ) -> 'None': ...
def _BNSetPlatformSystemCallConvention(arg0: 'ctypes.pointer[BNPlatform]', arg1: 'ctypes.pointer[BNCallingConvention]', ) -> 'None': ...
def _BNSetSaveSettingsOption(arg0: 'ctypes.pointer[BNSaveSettings]', arg1: 'SaveOptionEnum', arg2: 'bool', ) -> 'None': ...
def _BNSetScriptingInstanceCurrentAddress(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'int', ) -> 'None': ...
def _BNSetScriptingInstanceCurrentBasicBlock(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ctypes.pointer[BNBasicBlock]', ) -> 'None': ...
def _BNSetScriptingInstanceCurrentBinaryView(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNSetScriptingInstanceCurrentFunction(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ctypes.pointer[BNFunction]', ) -> 'None': ...
def _BNSetScriptingInstanceCurrentSelection(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'int', arg2: 'int', ) -> 'None': ...
def _BNSetScriptingInstanceDelimiters(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'str', ) -> 'None': ...
def _BNSetStructureBuilderAlignment(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'int', ) -> 'None': ...
def _BNSetStructureBuilderPacked(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'bool', ) -> 'None': ...
def _BNSetStructureBuilderType(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'StructureVariantEnum', ) -> 'None': ...
def _BNSetStructureBuilderWidth(arg0: 'ctypes.pointer[BNStructureBuilder]', arg1: 'int', ) -> 'None': ...
def _BNSetTypeLibraryDependencyName(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNSetTypeLibraryGuid(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNSetTypeLibraryName(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNSetUserBasicBlockHighlight(arg0: 'ctypes.pointer[BNBasicBlock]', arg1: 'BNHighlightColor', ) -> 'None': ...
def _BNSetUserCallRegisterStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNRegisterStackAdjustment]', arg4: 'int', ) -> 'None': ...
def _BNSetUserCallRegisterStackAdjustmentForRegisterStack(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', arg5: 'int', ) -> 'None': ...
def _BNSetUserCallStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', arg4: 'int', ) -> 'None': ...
def _BNSetUserCallTypeAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionCallingConvention(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNCallingConventionWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionCanReturn(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionClobberedRegisters(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterSetWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionHasVariableArguments(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionParameterVariables(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNParameterVariablesWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionRegisterStackAdjustments(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterStackAdjustment]', arg2: 'int', ) -> 'None': ...
def _BNSetUserFunctionReturnRegisters(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNRegisterSetWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionReturnType(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNSetUserFunctionStackAdjustment(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNOffsetWithConfidence]', ) -> 'None': ...
def _BNSetUserGotoLabelName(arg0: 'ctypes.pointer[BNFunction]', arg1: 'int', arg2: 'str', ) -> 'None': ...
def _BNSetUserIndirectBranches(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'ctypes.pointer[BNArchitectureAndAddress]', arg4: 'int', ) -> 'None': ...
def _BNSetUserInstructionHighlight(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'BNHighlightColor', ) -> 'None': ...
def _BNSetUserVariableValue(arg0: 'ctypes.pointer[BNFunction]', arg1: 'ctypes.pointer[BNVariable]', arg2: 'ctypes.pointer[BNArchitectureAndAddress]', arg3: 'ctypes.pointer[BNPossibleValueSet]', ) -> 'None': ...
def _BNSetViewForFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNSetWorkerThreadCount(arg0: 'int', ) -> 'None': ...
def _BNSettingsContains(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsDeserializeSchema(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'SettingsScopeEnum', arg3: 'bool', ) -> 'ctypes.c_bool': ...
def _BNSettingsGetBool(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_bool': ...
def _BNSettingsGetDouble(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_float': ...
def _BNSettingsGetInt64(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_int64': ...
def _BNSettingsGetJson(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_char_p': ...
def _BNSettingsGetString(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_char_p': ...
def _BNSettingsGetStringList(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', arg4: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNSettingsGetUInt64(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'ctypes.pointer[SettingsScopeEnum]', ) -> 'ctypes.c_uint64': ...
def _BNSettingsIsEmpty(arg0: 'ctypes.pointer[BNSettings]', ) -> 'ctypes.c_bool': ...
def _BNSettingsKeysList(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNSettingsQueryPropertyStringList(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNSettingsRegisterGroup(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsRegisterSetting(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsReset(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'ctypes.pointer[BNBinaryView]', arg3: 'SettingsScopeEnum', ) -> 'ctypes.c_bool': ...
def _BNSettingsResetAll(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'bool', ) -> 'ctypes.c_bool': ...
def _BNSettingsSerializeSchema(arg0: 'ctypes.pointer[BNSettings]', ) -> 'ctypes.c_char_p': ...
def _BNSettingsSetBool(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'bool', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetDouble(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'float', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetInt64(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetJson(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetResourceId(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', ) -> 'None': ...
def _BNSettingsSetString(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetStringList(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'ctypes.pointer[ctypes.c_char_p]', arg5: 'int', ) -> 'ctypes.c_bool': ...
def _BNSettingsSetUInt64(arg0: 'ctypes.pointer[BNSettings]', arg1: 'ctypes.pointer[BNBinaryView]', arg2: 'SettingsScopeEnum', arg3: 'str', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateBoolProperty(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'bool', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateDoubleProperty(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'float', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateInt64Property(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateProperty(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateStringListProperty(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[ctypes.c_char_p]', arg4: 'int', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateStringProperty(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'str', ) -> 'ctypes.c_bool': ...
def _BNSettingsUpdateUInt64Property(arg0: 'ctypes.pointer[BNSettings]', arg1: 'str', arg2: 'str', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNShowGraphReport(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'ctypes.pointer[BNFlowGraph]', ) -> 'None': ...
def _BNShowHTMLReport(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'str', arg3: 'str', ) -> 'None': ...
def _BNShowMarkdownReport(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'str', arg3: 'str', ) -> 'None': ...
def _BNShowMessageBox(arg0: 'str', arg1: 'str', arg2: 'MessageBoxButtonSetEnum', arg3: 'MessageBoxIconEnum', ) -> 'MessageBoxButtonResultEnum': ...
def _BNShowPlainTextReport(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', arg2: 'str', ) -> 'None': ...
def _BNShowReportCollection(arg0: 'str', arg1: 'ctypes.pointer[BNReportCollection]', ) -> 'None': ...
def _BNShutdown() -> 'None': ...
def _BNSkipAndReturnValue(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNArchitecture]', arg2: 'int', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNSnapshotHasAncestor(arg0: 'ctypes.pointer[BNSnapshot]', arg1: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_bool': ...
def _BNSnapshotHasContents(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_bool': ...
def _BNSnapshotHasUndo(arg0: 'ctypes.pointer[BNSnapshot]', ) -> 'ctypes.c_bool': ...
def _BNStartFlowGraphLayout(arg0: 'ctypes.pointer[BNFlowGraph]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'ctypes.pointer[BNFlowGraphLayoutRequest]': ...
def _BNStopScriptingInstance(arg0: 'ctypes.pointer[BNScriptingInstance]', ) -> 'None': ...
def _BNStoreSecretsProviderData(arg0: 'ctypes.pointer[BNSecretsProvider]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNStructureWithReplacedEnumeration(arg0: 'ctypes.pointer[BNStructure]', arg1: 'ctypes.pointer[BNEnumeration]', arg2: 'ctypes.pointer[BNEnumeration]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNStructureWithReplacedNamedTypeReference(arg0: 'ctypes.pointer[BNStructure]', arg1: 'ctypes.pointer[BNNamedTypeReference]', arg2: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNStructureWithReplacedStructure(arg0: 'ctypes.pointer[BNStructure]', arg1: 'ctypes.pointer[BNStructure]', arg2: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNStructure]': ...
def _BNTagGetData(arg0: 'ctypes.pointer[BNTag]', ) -> 'ctypes.c_char_p': ...
def _BNTagGetId(arg0: 'ctypes.pointer[BNTag]', ) -> 'ctypes.c_char_p': ...
def _BNTagGetType(arg0: 'ctypes.pointer[BNTag]', ) -> 'ctypes.pointer[BNTagType]': ...
def _BNTagSetData(arg0: 'ctypes.pointer[BNTag]', arg1: 'str', ) -> 'None': ...
def _BNTagTypeGetIcon(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_char_p': ...
def _BNTagTypeGetId(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_char_p': ...
def _BNTagTypeGetName(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_char_p': ...
def _BNTagTypeGetType(arg0: 'ctypes.pointer[BNTagType]', ) -> 'TagTypeTypeEnum': ...
def _BNTagTypeGetView(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.pointer[BNBinaryView]': ...
def _BNTagTypeGetVisible(arg0: 'ctypes.pointer[BNTagType]', ) -> 'ctypes.c_bool': ...
def _BNTagTypeSetIcon(arg0: 'ctypes.pointer[BNTagType]', arg1: 'str', ) -> 'None': ...
def _BNTagTypeSetName(arg0: 'ctypes.pointer[BNTagType]', arg1: 'str', ) -> 'None': ...
def _BNTagTypeSetType(arg0: 'ctypes.pointer[BNTagType]', arg1: 'TagTypeTypeEnum', ) -> 'None': ...
def _BNTagTypeSetVisible(arg0: 'ctypes.pointer[BNTagType]', arg1: 'bool', ) -> 'None': ...
def _BNToVariableIdentifier(arg0: 'ctypes.pointer[BNVariable]', ) -> 'ctypes.c_uint64': ...
def _BNTrimDatabaseSnapshot(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNTypeBuilderGetReferenceType(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ReferenceTypeEnum': ...
def _BNTypeBuilderGetStructureName(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNQualifiedName': ...
def _BNTypeBuilderGetSystemCallNumber(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_uint32': ...
def _BNTypeBuilderGetTypeName(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNQualifiedName': ...
def _BNTypeBuilderHasVariableArguments(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'BNBoolWithConfidence': ...
def _BNTypeBuilderIsSystemCall(arg0: 'ctypes.pointer[BNTypeBuilder]', ) -> 'ctypes.c_bool': ...
def _BNTypeBuilderSetAlternateName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'str', ) -> 'None': ...
def _BNTypeBuilderSetChildType(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNTypeWithConfidence]', ) -> 'None': ...
def _BNTypeBuilderSetConst(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNTypeBuilderSetSigned(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNTypeBuilderSetStackAdjustment(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNOffsetWithConfidence]', ) -> 'None': ...
def _BNTypeBuilderSetSystemCallNumber(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'bool', arg2: 'int', ) -> 'None': ...
def _BNTypeBuilderSetTypeName(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNTypeBuilderSetVolatile(arg0: 'ctypes.pointer[BNTypeBuilder]', arg1: 'ctypes.pointer[BNBoolWithConfidence]', ) -> 'None': ...
def _BNTypeGetReferenceType(arg0: 'ctypes.pointer[BNType]', ) -> 'ReferenceTypeEnum': ...
def _BNTypeGetStructureName(arg0: 'ctypes.pointer[BNType]', ) -> 'BNQualifiedName': ...
def _BNTypeGetSystemCallNumber(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_uint32': ...
def _BNTypeGetTypeName(arg0: 'ctypes.pointer[BNType]', ) -> 'BNQualifiedName': ...
def _BNTypeHasVariableArguments(arg0: 'ctypes.pointer[BNType]', ) -> 'BNBoolWithConfidence': ...
def _BNTypeIsSystemCall(arg0: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_bool': ...
def _BNTypeLibraryQueryMetadata(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'ctypes.pointer[BNMetadata]': ...
def _BNTypeLibraryRemoveMetadata(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNTypeLibraryStoreMetadata(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', arg2: 'ctypes.pointer[BNMetadata]', ) -> 'None': ...
def _BNTypeParserParseTypeString(arg0: 'ctypes.pointer[BNTypeParser]', arg1: 'str', arg2: 'ctypes.pointer[BNPlatform]', arg3: 'ctypes.pointer[BNQualifiedNameTypeAndId]', arg4: 'int', arg5: 'ctypes.pointer[BNQualifiedNameAndType]', arg6: 'ctypes.pointer[ctypes.pointer[BNTypeParserError]]', arg7: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNTypeParserParseTypesFromSource(arg0: 'ctypes.pointer[BNTypeParser]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[BNPlatform]', arg4: 'ctypes.pointer[BNQualifiedNameTypeAndId]', arg5: 'int', arg6: 'ctypes.pointer[ctypes.c_char_p]', arg7: 'int', arg8: 'ctypes.pointer[ctypes.c_char_p]', arg9: 'int', arg10: 'str', arg11: 'ctypes.pointer[BNTypeParserResult]', arg12: 'ctypes.pointer[ctypes.pointer[BNTypeParserError]]', arg13: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNTypeParserPreprocessSource(arg0: 'ctypes.pointer[BNTypeParser]', arg1: 'str', arg2: 'str', arg3: 'ctypes.pointer[BNPlatform]', arg4: 'ctypes.pointer[BNQualifiedNameTypeAndId]', arg5: 'int', arg6: 'ctypes.pointer[ctypes.c_char_p]', arg7: 'int', arg8: 'ctypes.pointer[ctypes.c_char_p]', arg9: 'int', arg10: 'ctypes.pointer[ctypes.c_char_p]', arg11: 'ctypes.pointer[ctypes.pointer[BNTypeParserError]]', arg12: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.c_bool': ...
def _BNTypeWithReplacedEnumeration(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNEnumeration]', arg2: 'ctypes.pointer[BNEnumeration]', ) -> 'ctypes.pointer[BNType]': ...
def _BNTypeWithReplacedNamedTypeReference(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNNamedTypeReference]', arg2: 'ctypes.pointer[BNNamedTypeReference]', ) -> 'ctypes.pointer[BNType]': ...
def _BNTypeWithReplacedStructure(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNStructure]', arg2: 'ctypes.pointer[BNStructure]', ) -> 'ctypes.pointer[BNType]': ...
def _BNTypesEqual(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_bool': ...
def _BNTypesNotEqual(arg0: 'ctypes.pointer[BNType]', arg1: 'ctypes.pointer[BNType]', ) -> 'ctypes.c_bool': ...
def _BNUndefineAnalysisType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'str', ) -> 'None': ...
def _BNUndefineAutoSymbol(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSymbol]', ) -> 'None': ...
def _BNUndefineDataVariable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'None': ...
def _BNUndefineUserAnalysisType(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNQualifiedName]', ) -> 'None': ...
def _BNUndefineUserDataVariable(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', ) -> 'None': ...
def _BNUndefineUserSymbol(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNSymbol]', ) -> 'None': ...
def _BNUndo(arg0: 'ctypes.pointer[BNFileMetadata]', ) -> 'ctypes.c_bool': ...
def _BNUnescapeTypeName(arg0: 'str', arg1: 'TokenEscapingTypeEnum', ) -> 'ctypes.c_char_p': ...
def _BNUnregisterDataNotification(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'ctypes.pointer[BNBinaryDataNotification]', ) -> 'None': ...
def _BNUnregisterDebugInfoParser(arg0: 'str', ) -> 'None': ...
def _BNUnregisterLogListener(arg0: 'ctypes.pointer[BNLogListener]', ) -> 'None': ...
def _BNUnregisterObjectDestructionCallbacks(arg0: 'ctypes.pointer[BNObjectDestructionCallbacks]', ) -> 'None': ...
def _BNUnregisterObjectRefDebugTrace(arg0: 'str', arg1: 'Optional[ctypes.c_void_p]', ) -> 'None': ...
def _BNUnregisterScriptingInstanceOutputListener(arg0: 'ctypes.pointer[BNScriptingInstance]', arg1: 'ctypes.pointer[BNScriptingOutputListener]', ) -> 'None': ...
def _BNUpdateAnalysis(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNUpdateAnalysisAndWait(arg0: 'ctypes.pointer[BNBinaryView]', ) -> 'None': ...
def _BNUpdateFlowGraph(arg0: 'ctypes.pointer[BNFlowGraph]', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNUpdateHighLevelILOperand(arg0: 'ctypes.pointer[BNHighLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'None': ...
def _BNUpdateLogListeners() -> 'None': ...
def _BNUpdateLowLevelILOperand(arg0: 'ctypes.pointer[BNLowLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'None': ...
def _BNUpdateMediumLevelILOperand(arg0: 'ctypes.pointer[BNMediumLevelILFunction]', arg1: 'int', arg2: 'int', arg3: 'int', ) -> 'None': ...
def _BNUpdateReportFlowGraph(arg0: 'ctypes.pointer[BNReportCollection]', arg1: 'int', arg2: 'ctypes.pointer[BNFlowGraph]', ) -> 'None': ...
def _BNUpdateToLatestVersion(arg0: 'str', arg1: 'ctypes.pointer[ctypes.c_char_p]', arg2: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg3: 'Optional[ctypes.c_void_p]', ) -> 'UpdateResultEnum': ...
def _BNUpdateToVersion(arg0: 'str', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_char_p]', arg3: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', arg4: 'Optional[ctypes.c_void_p]', ) -> 'UpdateResultEnum': ...
def _BNUpdatesChecked() -> 'None': ...
def _BNWaitForMainThreadAction(arg0: 'ctypes.pointer[BNMainThreadAction]', ) -> 'None': ...
def _BNWasFunctionAutomaticallyDiscovered(arg0: 'ctypes.pointer[BNFunction]', ) -> 'ctypes.c_bool': ...
def _BNWorkerEnqueue(arg0: 'Optional[ctypes.c_void_p]', arg1: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'None': ...
def _BNWorkerInteractiveEnqueue(arg0: 'Optional[ctypes.c_void_p]', arg1: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'None': ...
def _BNWorkerPriorityEnqueue(arg0: 'Optional[ctypes.c_void_p]', arg1: 'Callable[[Optional[ctypes.c_void_p], ], None]', ) -> 'None': ...
def _BNWorkflowAssignSubactivities(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_char_p]', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNWorkflowClear(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'ctypes.c_bool': ...
def _BNWorkflowClone(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'str', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNWorkflowContains(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNWorkflowGetActivity(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'ctypes.pointer[BNActivity]': ...
def _BNWorkflowGetActivityRoots(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNWorkflowGetConfiguration(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'ctypes.c_char_p': ...
def _BNWorkflowGetGraph(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'bool', ) -> 'ctypes.pointer[BNFlowGraph]': ...
def _BNWorkflowGetSubactivities(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'bool', arg3: 'ctypes.pointer[ctypes.c_uint64]', ) -> 'ctypes.pointer[ctypes.c_char_p]': ...
def _BNWorkflowInsert(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'ctypes.pointer[ctypes.c_char_p]', arg3: 'int', ) -> 'ctypes.c_bool': ...
def _BNWorkflowInstance(arg0: 'str', ) -> 'ctypes.pointer[BNWorkflow]': ...
def _BNWorkflowIsRegistered(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'ctypes.c_bool': ...
def _BNWorkflowRegisterActivity(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'ctypes.pointer[BNActivity]', arg2: 'ctypes.pointer[ctypes.c_char_p]', arg3: 'int', arg4: 'str', ) -> 'ctypes.c_bool': ...
def _BNWorkflowRemove(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'ctypes.c_bool': ...
def _BNWorkflowReplace(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNWorkflowShowReport(arg0: 'ctypes.pointer[BNWorkflow]', arg1: 'str', ) -> 'None': ...
def _BNWorkflowSize(arg0: 'ctypes.pointer[BNWorkflow]', ) -> 'ctypes.c_uint64': ...
def _BNWrite16(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWrite32(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWrite64(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWrite8(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteBE16(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteBE32(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteBE64(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteData(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'Optional[ctypes.c_void_p]', arg2: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteDataForDownloadInstance(arg0: 'ctypes.pointer[BNDownloadInstance]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNWriteDatabaseAnalysisCache(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'ctypes.pointer[BNKeyValueStore]', ) -> 'ctypes.c_bool': ...
def _BNWriteDatabaseGlobal(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'str', arg2: 'str', ) -> 'ctypes.c_bool': ...
def _BNWriteDatabaseGlobalData(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'str', arg2: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_bool': ...
def _BNWriteDatabaseSnapshotData(arg0: 'ctypes.pointer[BNDatabase]', arg1: 'ctypes.pointer[ctypes.c_int64]', arg2: 'int', arg3: 'ctypes.pointer[BNBinaryView]', arg4: 'str', arg5: 'ctypes.pointer[BNKeyValueStore]', arg6: 'bool', arg7: 'Optional[ctypes.c_void_p]', arg8: 'Callable[[Optional[ctypes.c_void_p], int, int, ], ctypes.c_bool]', ) -> 'ctypes.c_int64': ...
def _BNWriteLE16(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteLE32(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteLE64(arg0: 'ctypes.pointer[BNBinaryWriter]', arg1: 'int', ) -> 'ctypes.c_bool': ...
def _BNWriteTypeLibraryToFile(arg0: 'ctypes.pointer[BNTypeLibrary]', arg1: 'str', ) -> 'None': ...
def _BNWriteViewBuffer(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.c_uint64': ...
def _BNWriteViewData(arg0: 'ctypes.pointer[BNBinaryView]', arg1: 'int', arg2: 'Optional[ctypes.c_void_p]', arg3: 'int', ) -> 'ctypes.c_uint64': ...
def _BNWriteWebsocketClientData(arg0: 'ctypes.pointer[BNWebsocketClient]', arg1: 'ctypes.pointer[ctypes.c_uint8]', arg2: 'int', ) -> 'ctypes.c_uint64': ...
def _BNZlibCompress(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
def _BNZlibDecompress(arg0: 'ctypes.pointer[BNDataBuffer]', ) -> 'ctypes.pointer[BNDataBuffer]': ...
